{"ast":null,"code":"var _jsxFileName = \"D:\\\\benki\\\\Programming\\\\GitHub\\\\homelab-dashboard\\\\client\\\\homelab-dashboard\\\\src\\\\ResourceUsageBar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Resource from \"./Resource\";\nimport * as systemConnector from \"./systemConnector\";\nfunction ResourceUsageBar() {\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState(\"\");\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState(\"\");\n  const [freeDiskSpace, setFreeDiskSpace] = useState(\"\");\n  const [totalDiskSpace, setTotalDiskSpace] = useState(\"\");\n  useEffect(() => {\n    // Function to be executed every second\n    const updateSystemInfo = () => {\n      systemConnector.getCpuUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setCpuUtilizationPercent(result);\n        }\n      });\n      systemConnector.getMemoryUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setMemUtilizationPercent(result);\n        }\n      });\n      systemConnector.getFreeDiskSpace((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setFreeDiskSpace(result);\n        }\n      });\n      systemConnector.getTotalDiskSpace((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setTotalDiskSpace(result);\n        }\n      });\n    };\n\n    // Set up the interval\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures that the effect runs only once\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"resource-usage-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Resource, {\n    imgPath: \"/images/cpu-icon.png\",\n    altText: \"CPU Icon\",\n    usageMetric: `${cpuUtilizationPercent}%`,\n    resourceName: \"CPU\",\n    percent: cpuUtilizationPercent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Resource, {\n    imgPath: \"/images/memory-icon.png\",\n    altText: \"Memory Icon\",\n    usageMetric: `${memUtilizationPercent}%`,\n    resourceName: \"MEM\",\n    percent: memUtilizationPercent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Resource, {\n    imgPath: \"/images/storage-icon.png\",\n    usageMetric: `${systemConnector.formatBytes(freeDiskSpace)}`,\n    resourceName: \"Free\",\n    percent: (Number(freeDiskSpace) / Number(totalDiskSpace) * 100).toFixed(2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}\nexport default ResourceUsageBar;","map":{"version":3,"names":["React","useState","useEffect","Resource","systemConnector","ResourceUsageBar","cpuUtilizationPercent","setCpuUtilizationPercent","memUtilizationPercent","setMemUtilizationPercent","freeDiskSpace","setFreeDiskSpace","totalDiskSpace","setTotalDiskSpace","updateSystemInfo","getCpuUtilization","error","result","console","getMemoryUtilization","getFreeDiskSpace","getTotalDiskSpace","intervalId","setInterval","clearInterval","createElement","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","imgPath","altText","usageMetric","resourceName","percent","formatBytes","Number","toFixed"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/src/ResourceUsageBar.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport Resource from \"./Resource\";\r\nimport * as systemConnector from \"./systemConnector\";\r\n\r\nfunction ResourceUsageBar() {\r\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState(\"\");\r\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState(\"\");\r\n  const [freeDiskSpace, setFreeDiskSpace] = useState(\"\");\r\n  const [totalDiskSpace, setTotalDiskSpace] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Function to be executed every second\r\n    const updateSystemInfo = () => {\r\n      \r\n      systemConnector.getCpuUtilization((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setCpuUtilizationPercent(result);\r\n        }\r\n      });\r\n\r\n      systemConnector.getMemoryUtilization((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setMemUtilizationPercent(result);\r\n        }\r\n      });\r\n\r\n      systemConnector.getFreeDiskSpace((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setFreeDiskSpace(result);\r\n        }\r\n      });\r\n\r\n      systemConnector.getTotalDiskSpace((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setTotalDiskSpace(result);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Set up the interval\r\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\r\n\r\n    // Clean up the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, []); // Empty dependency array ensures that the effect runs only once\r\n  \r\n  return (\r\n    <div id=\"resource-usage-bar\">\r\n        <Resource \r\n        imgPath={\"/images/cpu-icon.png\"}\r\n        altText={\"CPU Icon\"}\r\n        usageMetric={`${cpuUtilizationPercent}%`}\r\n        resourceName={\"CPU\"}\r\n        percent={cpuUtilizationPercent}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"/images/memory-icon.png\"}\r\n        altText={\"Memory Icon\"}\r\n        usageMetric={`${memUtilizationPercent}%`}\r\n        resourceName={\"MEM\"}\r\n        percent={memUtilizationPercent}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"/images/storage-icon.png\"}\r\n        usageMetric={`${systemConnector.formatBytes(freeDiskSpace)}`}\r\n        resourceName={\"Free\"}\r\n        percent={(Number(freeDiskSpace) / Number(totalDiskSpace) * 100).toFixed(2)}\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ResourceUsageBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}