{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst {\n  asciiLowercase,\n  parseNonNegativeInteger\n} = require(\"../helpers/strings\");\nconst {\n  closest\n} = require(\"../helpers/traversal\");\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  const parsed = parseNonNegativeInteger(attrValue);\n  if (parsed === null) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n    return tr.cells.indexOf(this);\n  }\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n    return \"\";\n  }\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n}\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","asciiLowercase","parseNonNegativeInteger","closest","reflectedAttributeClampedToRange","attrValue","min","max","defaultValue","parsed","HTMLTableCellElementImpl","colSpan","getAttributeNS","V","setAttributeNS","String","rowSpan","cellIndex","tr","cells","indexOf","scope","value","module","exports"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst { asciiLowercase, parseNonNegativeInteger } = require(\"../helpers/strings\");\nconst { closest } = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  const parsed = parseNonNegativeInteger(attrValue);\n  if (parsed === null) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC,CAACC,cAAc;AAEpE,MAAM;EAAEC,cAAc;EAAEC;AAAwB,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACjF,MAAM;EAAEI;AAAQ,CAAC,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AAEnD,SAASK,gCAAgCA,CAACC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,YAAY,GAAG,CAAC,EAAE;EAC/E,IAAIH,SAAS,KAAK,IAAI,EAAE;IACtB,OAAOG,YAAY;EACrB;EACA,MAAMC,MAAM,GAAGP,uBAAuB,CAACG,SAAS,CAAC;EACjD,IAAII,MAAM,KAAK,IAAI,EAAE;IACnB,OAAOD,YAAY;EACrB;EACA,IAAIC,MAAM,GAAGH,GAAG,EAAE;IAChB,OAAOA,GAAG;EACZ;EACA,IAAIG,MAAM,GAAGF,GAAG,EAAE;IAChB,OAAOA,GAAG;EACZ;EACA,OAAOE,MAAM;AACf;AAEA,MAAMC,wBAAwB,SAASZ,eAAe,CAAC;EACrD,IAAIa,OAAOA,CAAA,EAAG;IACZ,OAAOP,gCAAgC,CAAC,IAAI,CAACQ,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;EAC3F;EAEA,IAAID,OAAOA,CAACE,CAAC,EAAE;IACb,IAAI,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAEC,MAAM,CAACF,CAAC,CAAC,CAAC;EACjD;EAEA,IAAIG,OAAOA,CAAA,EAAG;IACZ,OAAOZ,gCAAgC,CAAC,IAAI,CAACQ,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;EAC5F;EAEA,IAAII,OAAOA,CAACH,CAAC,EAAE;IACb,IAAI,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAEC,MAAM,CAACF,CAAC,CAAC,CAAC;EACjD;EAEA,IAAII,SAASA,CAAA,EAAG;IACd,MAAMC,EAAE,GAAGf,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IAC9B,IAAIe,EAAE,KAAK,IAAI,EAAE;MACf,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,EAAE,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC;EAC/B;EAEA,IAAIC,KAAKA,CAAA,EAAG;IACV,IAAIC,KAAK,GAAG,IAAI,CAACV,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC;IAC9C,IAAIU,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,EAAE;IACX;;IAEA;IACAA,KAAK,GAAGrB,cAAc,CAACqB,KAAK,CAAC;IAC7B,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,UAAU,IAAIA,KAAK,KAAK,UAAU,EAAE;MACtF,OAAOA,KAAK;IACd;IAEA,OAAO,EAAE;EACX;EAEA,IAAID,KAAKA,CAACR,CAAC,EAAE;IACX,IAAI,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAED,CAAC,CAAC;EACvC;AACF;AAEAU,MAAM,CAACC,OAAO,GAAG;EACfxB,cAAc,EAAEU;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}