{"ast":null,"code":"var _jsxFileName = \"D:\\\\benki\\\\Programming\\\\GitHub\\\\homelab-dashboard\\\\client\\\\homelab-dashboard\\\\src\\\\ResourceUsageBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Resource from \"./Resource\";\nimport * as systemConnector from \"./systemConnector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResourceUsageBar() {\n  _s();\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState(\"\");\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState(\"\");\n  const [freeDiskSpace, setFreeDiskSpace] = useState(\"\");\n  const [totalDiskSpace, setTotalDiskSpace] = useState(\"\");\n  useEffect(() => {\n    // Function to be executed every second\n    const updateSystemInfo = () => {\n      systemConnector.getCpuUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setCpuUtilizationPercent(result);\n        }\n      });\n      systemConnector.getMemoryUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setMemUtilizationPercent(result);\n        }\n      });\n      systemConnector.getFreeDiskSpace((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setFreeDiskSpace(result);\n        }\n      });\n      systemConnector.getTotalDiskSpace((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setTotalDiskSpace(result);\n        }\n      });\n    };\n\n    // Set up the interval\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures that the effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"resource-usage-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"client/homelab-dashboard/src/images/cpu-icon.png\",\n      usageMetric: `${cpuUtilizationPercent}%`,\n      resourceName: \"CPU\",\n      percent: cpuUtilizationPercent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${memUtilizationPercent}%`,\n      resourceName: \"MEM\",\n      percent: memUtilizationPercent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${systemConnector.formatBytes(freeDiskSpace)}`,\n      resourceName: \"Free\",\n      percent: (Number(freeDiskSpace) / Number(totalDiskSpace) * 100).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(ResourceUsageBar, \"iLAePWjfkT4uHo9AWGXuAR5wWxw=\");\n_c = ResourceUsageBar;\nexport default ResourceUsageBar;\nvar _c;\n$RefreshReg$(_c, \"ResourceUsageBar\");","map":{"version":3,"names":["React","useState","useEffect","Resource","systemConnector","jsxDEV","_jsxDEV","ResourceUsageBar","_s","cpuUtilizationPercent","setCpuUtilizationPercent","memUtilizationPercent","setMemUtilizationPercent","freeDiskSpace","setFreeDiskSpace","totalDiskSpace","setTotalDiskSpace","updateSystemInfo","getCpuUtilization","error","result","console","getMemoryUtilization","getFreeDiskSpace","getTotalDiskSpace","intervalId","setInterval","clearInterval","id","children","imgPath","usageMetric","resourceName","percent","fileName","_jsxFileName","lineNumber","columnNumber","formatBytes","Number","toFixed","_c","$RefreshReg$"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/src/ResourceUsageBar.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport Resource from \"./Resource\";\r\nimport * as systemConnector from \"./systemConnector\";\r\n\r\nfunction ResourceUsageBar() {\r\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState(\"\");\r\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState(\"\");\r\n  const [freeDiskSpace, setFreeDiskSpace] = useState(\"\");\r\n  const [totalDiskSpace, setTotalDiskSpace] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Function to be executed every second\r\n    const updateSystemInfo = () => {\r\n      \r\n      systemConnector.getCpuUtilization((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setCpuUtilizationPercent(result);\r\n        }\r\n      });\r\n\r\n      systemConnector.getMemoryUtilization((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setMemUtilizationPercent(result);\r\n        }\r\n      });\r\n\r\n      systemConnector.getFreeDiskSpace((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setFreeDiskSpace(result);\r\n        }\r\n      });\r\n\r\n      systemConnector.getTotalDiskSpace((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          setTotalDiskSpace(result);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Set up the interval\r\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\r\n\r\n    // Clean up the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, []); // Empty dependency array ensures that the effect runs only once\r\n  \r\n  return (\r\n    <div id=\"resource-usage-bar\">\r\n        <Resource \r\n        imgPath={\"client/homelab-dashboard/src/images/cpu-icon.png\"}\r\n        usageMetric={`${cpuUtilizationPercent}%`}\r\n        resourceName={\"CPU\"}\r\n        percent={cpuUtilizationPercent}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${memUtilizationPercent}%`}\r\n        resourceName={\"MEM\"}\r\n        percent={memUtilizationPercent}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${systemConnector.formatBytes(freeDiskSpace)}`}\r\n        resourceName={\"Free\"}\r\n        percent={(Number(freeDiskSpace) / Number(totalDiskSpace) * 100).toFixed(2)}\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ResourceUsageBar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}