{"ast":null,"code":"\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\nconst {\n  HTML_NS,\n  SVG_NS\n} = require(\"../helpers/namespaces\");\nconst {\n  createElement,\n  internalCreateElementNSSteps\n} = require(\"../helpers/create-element\");\nconst DocumentType = require(\"../generated/DocumentType\");\nconst documents = require(\"../documents.js\");\nclass DOMImplementationImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n  hasFeature() {\n    return true;\n  }\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(this._globalObject, qualifiedName);\n    return DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n    const document = documents.createImpl(this._globalObject, {\n      contentType,\n      parsingMode: \"xml\",\n      encoding: \"UTF-8\"\n    });\n    let element = null;\n    if (qualifiedName !== \"\") {\n      element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n    }\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n    if (element !== null) {\n      document.appendChild(element);\n    }\n    document._origin = this._ownerDocument._origin;\n    return document;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = documents.createImpl(this._globalObject, {\n      parsingMode: \"html\",\n      encoding: \"UTF-8\"\n    });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    const doctype = DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: document,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    const htmlElement = createElement(document, \"html\", HTML_NS);\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    const headElement = createElement(document, \"head\", HTML_NS);\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = createElement(document, \"title\", HTML_NS);\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    const bodyElement = createElement(document, \"body\", HTML_NS);\n    htmlElement.appendChild(bodyElement);\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n}\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};","map":{"version":3,"names":["validateNames","require","HTML_NS","SVG_NS","createElement","internalCreateElementNSSteps","DocumentType","documents","DOMImplementationImpl","constructor","globalObject","args","privateData","_globalObject","_ownerDocument","ownerDocument","hasFeature","createDocumentType","qualifiedName","publicId","systemId","qname","createImpl","name","createDocument","namespace","doctype","contentType","document","parsingMode","encoding","element","appendChild","_origin","createHTMLDocument","title","htmlElement","headElement","undefined","titleElement","createTextNode","bodyElement","module","exports","implementation"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/nodes/DOMImplementation-impl.js"],"sourcesContent":["\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\nconst { createElement, internalCreateElementNSSteps } = require(\"../helpers/create-element\");\nconst DocumentType = require(\"../generated/DocumentType\");\nconst documents = require(\"../documents.js\");\n\nclass DOMImplementationImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  hasFeature() {\n    return true;\n  }\n\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(this._globalObject, qualifiedName);\n\n    return DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n\n    const document = documents.createImpl(this._globalObject, {\n      contentType,\n      parsingMode: \"xml\",\n      encoding: \"UTF-8\"\n    });\n\n    let element = null;\n    if (qualifiedName !== \"\") {\n      element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    document._origin = this._ownerDocument._origin;\n\n    return document;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = documents.createImpl(this._globalObject, {\n      parsingMode: \"html\",\n      encoding: \"UTF-8\"\n    });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    const doctype = DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: document,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    const htmlElement = createElement(document, \"html\", HTML_NS);\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    const headElement = createElement(document, \"head\", HTML_NS);\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = createElement(document, \"title\", HTML_NS);\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    const bodyElement = createElement(document, \"body\", HTML_NS);\n    htmlElement.appendChild(bodyElement);\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n}\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}