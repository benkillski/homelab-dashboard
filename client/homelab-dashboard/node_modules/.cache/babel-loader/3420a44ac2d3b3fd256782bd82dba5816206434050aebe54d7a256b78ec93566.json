{"ast":null,"code":"var _jsxFileName = \"D:\\\\benki\\\\Programming\\\\GitHub\\\\homelab-dashboard\\\\client\\\\homelab-dashboard\\\\src\\\\ResourceUsageBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Resource from \"./Resource\";\nimport * as systemConnector from \"./systemConnector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cpuUtilizationPercent = systemConnector.getCpuUtilization();\nlet memUtilizationPercent = systemConnector.getMemoryUtilization();\nlet freeDiskSpace = systemConnector.getFreeDiskSpace();\nlet totalDiskSpace = systemConnector.getTotalDiskSpace();\nfunction ResourceUsageBar() {\n  _s();\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState({});\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState({});\n  const [freeDiskSpace, setFreeDiskSpace] = useState({});\n  const [totalDiskSpace, setTotalDiskSpace] = useState({});\n  useEffect(() => {\n    // Function to be executed every second\n    const updateSystemInfo = () => {\n      console.log(\"Update\");\n      setCpuUtilizationPercent(systemConnector.getCpuUtilization());\n      setMemUtilizationPercent(systemConnector.getMemoryUtilization());\n      setFreeDiskSpace(systemConnector.getFreeDiskSpace);\n      setTotalDiskSpace(systemConnector.getTotalDiskSpace);\n    };\n\n    // Set up the interval\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures that the effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"resource-usage-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${cpuUtilizationPercent.responseText}%`,\n      resourceName: \"CPU\",\n      percent: cpuUtilizationPercent.responseText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${memUtilizationPercent.responseText}%`,\n      resourceName: \"MEM\",\n      percent: memUtilizationPercent.responseText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${systemConnector.formatBytes(freeDiskSpace.responseText)}`,\n      resourceName: \"Free\",\n      percent: (Number(freeDiskSpace.responseText) / Number(totalDiskSpace.responseText) * 100).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ResourceUsageBar, \"8aGJiu56hYDpDCed0VgKBl3H/dk=\");\n_c = ResourceUsageBar;\nexport default ResourceUsageBar;\nvar _c;\n$RefreshReg$(_c, \"ResourceUsageBar\");","map":{"version":3,"names":["React","useState","useEffect","Resource","systemConnector","jsxDEV","_jsxDEV","cpuUtilizationPercent","getCpuUtilization","memUtilizationPercent","getMemoryUtilization","freeDiskSpace","getFreeDiskSpace","totalDiskSpace","getTotalDiskSpace","ResourceUsageBar","_s","setCpuUtilizationPercent","setMemUtilizationPercent","setFreeDiskSpace","setTotalDiskSpace","updateSystemInfo","console","log","intervalId","setInterval","clearInterval","id","children","imgPath","usageMetric","responseText","resourceName","percent","fileName","_jsxFileName","lineNumber","columnNumber","formatBytes","Number","toFixed","_c","$RefreshReg$"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/src/ResourceUsageBar.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport Resource from \"./Resource\";\r\nimport * as systemConnector from \"./systemConnector\";\r\n\r\nlet cpuUtilizationPercent = systemConnector.getCpuUtilization();\r\nlet memUtilizationPercent = systemConnector.getMemoryUtilization();\r\nlet freeDiskSpace = systemConnector.getFreeDiskSpace();\r\nlet totalDiskSpace = systemConnector.getTotalDiskSpace();\r\n\r\nfunction ResourceUsageBar() {\r\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState({});\r\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState({});\r\n  const [freeDiskSpace, setFreeDiskSpace] = useState({});\r\n  const [totalDiskSpace, setTotalDiskSpace] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Function to be executed every second\r\n    const updateSystemInfo = () => {\r\n      console.log(\"Update\");\r\n      setCpuUtilizationPercent(systemConnector.getCpuUtilization());\r\n      setMemUtilizationPercent(systemConnector.getMemoryUtilization());\r\n      setFreeDiskSpace(systemConnector.getFreeDiskSpace);\r\n      setTotalDiskSpace(systemConnector.getTotalDiskSpace);\r\n    };\r\n\r\n    // Set up the interval\r\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\r\n\r\n    // Clean up the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, []); // Empty dependency array ensures that the effect runs only once\r\n  \r\n  return (\r\n    <div id=\"resource-usage-bar\">\r\n        <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${cpuUtilizationPercent.responseText}%`}\r\n        resourceName={\"CPU\"}\r\n        percent={cpuUtilizationPercent.responseText}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${memUtilizationPercent.responseText}%`}\r\n        resourceName={\"MEM\"}\r\n        percent={memUtilizationPercent.responseText}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${systemConnector.formatBytes(freeDiskSpace.responseText)}`}\r\n        resourceName={\"Free\"}\r\n        percent={(Number(freeDiskSpace.responseText) / Number(totalDiskSpace.responseText) * 100).toFixed(2)}\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ResourceUsageBar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}