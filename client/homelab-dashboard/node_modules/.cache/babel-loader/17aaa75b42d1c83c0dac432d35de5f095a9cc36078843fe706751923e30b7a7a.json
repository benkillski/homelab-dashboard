{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst {\n  documentBaseURL,\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\nconst {\n  navigate\n} = require(\"./navigation\");\n\n// Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\nexports.implementation = class LocationImpl {\n  constructor(globalObject, args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n    this._globalObject = globalObject;\n  }\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n\n    return this._locationObjectNavigate(url);\n  }\n  _locationObjectNavigate(url, {\n    replacement = false\n  } = {}) {\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n\n    navigate(this._relevantDocument._defaultView, url, {\n      replacement,\n      exceptionsEnabled: true\n    });\n  }\n  toString() {\n    return this.href;\n  }\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, {\n      baseURL: documentBaseURL(this._relevantDocument)\n    });\n    if (newURL === null) {\n      throw new TypeError(`Could not parse \"${v}\" as a URL`);\n    }\n    this._locationObjectSetterNavigate(newURL);\n  }\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    const copyURL = {\n      ...this._url\n    };\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", {\n      url: copyURL,\n      stateOverride: \"scheme start\"\n    });\n    if (possibleFailure === null) {\n      throw new TypeError(`Could not parse the URL after setting the procol to \"${v}\"`);\n    }\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  get host() {\n    const url = this._url;\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n  set host(v) {\n    const copyURL = {\n      ...this._url\n    };\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"host\"\n    });\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n    return whatwgURL.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    const copyURL = {\n      ...this._url\n    };\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"hostname\"\n    });\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    const copyURL = {\n      ...this._url\n    };\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"port\"\n    });\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  get pathname() {\n    const url = this._url;\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n    return \"/\" + url.path.join(\"/\");\n  }\n  set pathname(v) {\n    const copyURL = {\n      ...this._url\n    };\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"path start\"\n    });\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    const copyURL = {\n      ...this._url\n    };\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    const copyURL = {\n      ...this._url\n    };\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"fragment\"\n      });\n    }\n    this._locationObjectSetterNavigate(copyURL);\n  }\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [`Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`, \"SyntaxError\"]);\n    }\n    this._locationObjectNavigate(parsedURL);\n  }\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [`Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`, \"SyntaxError\"]);\n    }\n    this._locationObjectNavigate(parsedURL, {\n      replacement: true\n    });\n  }\n  reload() {\n    const flags = {\n      replace: true,\n      reloadTriggered: true,\n      exceptionsEnabled: true\n    };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n};","map":{"version":3,"names":["whatwgURL","require","DOMException","documentBaseURL","parseURLToResultingURLRecord","navigate","exports","implementation","LocationImpl","constructor","globalObject","args","privateData","_relevantDocument","relevantDocument","url","_globalObject","_url","_URL","_locationObjectSetterNavigate","_locationObjectNavigate","replacement","_defaultView","exceptionsEnabled","toString","href","serializeURL","v","newURL","parseURL","baseURL","TypeError","origin","serializeURLOrigin","protocol","scheme","copyURL","possibleFailure","basicURLParse","stateOverride","host","port","serializeHost","serializeInteger","cannotBeABaseURL","hostname","pathname","path","join","search","query","input","substring","encodingOverride","charset","hash","fragment","assign","parsedURL","create","URL","replace","reload","flags","reloadTriggered"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js"],"sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { documentBaseURL, parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst { navigate } = require(\"./navigation\");\n\n// Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\nexports.implementation = class LocationImpl {\n  constructor(globalObject, args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n\n    this._globalObject = globalObject;\n  }\n\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n\n    return this._locationObjectNavigate(url);\n  }\n\n  _locationObjectNavigate(url, { replacement = false } = {}) {\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n\n    navigate(this._relevantDocument._defaultView, url, { replacement, exceptionsEnabled: true });\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, { baseURL: documentBaseURL(this._relevantDocument) });\n    if (newURL === null) {\n      throw new TypeError(`Could not parse \"${v}\" as a URL`);\n    }\n\n    this._locationObjectSetterNavigate(newURL);\n  }\n\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    const copyURL = { ...this._url };\n\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", { url: copyURL, stateOverride: \"scheme start\" });\n    if (possibleFailure === null) {\n      throw new TypeError(`Could not parse the URL after setting the procol to \"${v}\"`);\n    }\n\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n  set host(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"host\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"hostname\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"port\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get pathname() {\n    const url = this._url;\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n  set pathname(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"path start\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    const copyURL = { ...this._url };\n\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, { url: copyURL, stateOverride: \"fragment\" });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [\n        `Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`,\n        \"SyntaxError\"\n      ]);\n    }\n\n    this._locationObjectNavigate(parsedURL);\n  }\n\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [\n        `Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`,\n        \"SyntaxError\"\n      ]);\n    }\n\n    this._locationObjectNavigate(parsedURL, { replacement: true });\n  }\n\n  reload() {\n    const flags = { replace: true, reloadTriggered: true, exceptionsEnabled: true };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}