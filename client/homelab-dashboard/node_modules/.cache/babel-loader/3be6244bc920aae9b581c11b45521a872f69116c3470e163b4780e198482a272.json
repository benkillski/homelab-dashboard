{"ast":null,"code":"\"use strict\";\n\nconst {\n  createEventAccessor\n} = require(\"../helpers/create-event-accessor\");\nconst events = new Set([\n// WindowEventHandlers\n\"afterprint\", \"beforeprint\", \"beforeunload\", \"hashchange\", \"languagechange\", \"message\", \"messageerror\", \"offline\", \"online\", \"pagehide\", \"pageshow\", \"popstate\", \"rejectionhandled\", \"storage\", \"unhandledrejection\", \"unload\",\n// inherited and overridden\n\"blur\", \"error\", \"focus\", \"load\", \"resize\", \"scroll\"]);\n\n// This class builds on GlobalEventHandlers, which must be mixed in first.\nclass WindowEventHandlersImpl {\n  _proxyWindowEventsToWindow() {\n    // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)\n    this._getEventHandlerTarget = event => {\n      if (events.has(event)) {\n        return this.ownerDocument.defaultView || null;\n      }\n      return this;\n    };\n  }\n}\nfor (const event of events) {\n  createEventAccessor(WindowEventHandlersImpl.prototype, event);\n}\nmodule.exports = {\n  implementation: WindowEventHandlersImpl\n};","map":{"version":3,"names":["createEventAccessor","require","events","Set","WindowEventHandlersImpl","_proxyWindowEventsToWindow","_getEventHandlerTarget","event","has","ownerDocument","defaultView","prototype","module","exports","implementation"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/nodes/WindowEventHandlers-impl.js"],"sourcesContent":["\"use strict\";\n\nconst { createEventAccessor } = require(\"../helpers/create-event-accessor\");\n\nconst events = new Set([\n  // WindowEventHandlers\n  \"afterprint\",\n  \"beforeprint\",\n  \"beforeunload\",\n  \"hashchange\",\n  \"languagechange\",\n  \"message\",\n  \"messageerror\",\n  \"offline\",\n  \"online\",\n  \"pagehide\",\n  \"pageshow\",\n  \"popstate\",\n  \"rejectionhandled\",\n  \"storage\",\n  \"unhandledrejection\",\n  \"unload\",\n\n  // inherited and overridden\n  \"blur\",\n  \"error\",\n  \"focus\",\n  \"load\",\n  \"resize\",\n  \"scroll\"\n]);\n\n// This class builds on GlobalEventHandlers, which must be mixed in first.\nclass WindowEventHandlersImpl {\n  _proxyWindowEventsToWindow() {\n    // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)\n    this._getEventHandlerTarget = event => {\n      if (events.has(event)) {\n        return this.ownerDocument.defaultView || null;\n      }\n      return this;\n    };\n  }\n}\n\nfor (const event of events) {\n  createEventAccessor(WindowEventHandlersImpl.prototype, event);\n}\n\nmodule.exports = {\n  implementation: WindowEventHandlersImpl\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAoB,CAAC,GAAGC,OAAO,CAAC,kCAAkC,CAAC;AAE3E,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC;AACrB;AACA,YAAY,EACZ,aAAa,EACb,cAAc,EACd,YAAY,EACZ,gBAAgB,EAChB,SAAS,EACT,cAAc,EACd,SAAS,EACT,QAAQ,EACR,UAAU,EACV,UAAU,EACV,UAAU,EACV,kBAAkB,EAClB,SAAS,EACT,oBAAoB,EACpB,QAAQ;AAER;AACA,MAAM,EACN,OAAO,EACP,OAAO,EACP,MAAM,EACN,QAAQ,EACR,QAAQ,CACT,CAAC;;AAEF;AACA,MAAMC,uBAAuB,CAAC;EAC5BC,0BAA0BA,CAAA,EAAG;IAC3B;IACA,IAAI,CAACC,sBAAsB,GAAGC,KAAK,IAAI;MACrC,IAAIL,MAAM,CAACM,GAAG,CAACD,KAAK,CAAC,EAAE;QACrB,OAAO,IAAI,CAACE,aAAa,CAACC,WAAW,IAAI,IAAI;MAC/C;MACA,OAAO,IAAI;IACb,CAAC;EACH;AACF;AAEA,KAAK,MAAMH,KAAK,IAAIL,MAAM,EAAE;EAC1BF,mBAAmB,CAACI,uBAAuB,CAACO,SAAS,EAAEJ,KAAK,CAAC;AAC/D;AAEAK,MAAM,CAACC,OAAO,GAAG;EACfC,cAAc,EAAEV;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}