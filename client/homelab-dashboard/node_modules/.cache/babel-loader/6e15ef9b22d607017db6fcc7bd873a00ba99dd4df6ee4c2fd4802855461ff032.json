{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst SupportedType = require(\"./SupportedType.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"DOMParser\";\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new TypeError(`${context} is not of type 'DOMParser'.`);\n};\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n  const ctor = globalObject[ctorRegistrySymbol][\"DOMParser\"];\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor DOMParser is not installed on the passed global object\");\n  }\n  return Object.create(ctor.prototype);\n}\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject) => {};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\nconst exposed = new Set([\"Window\"]);\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  class DOMParser {\n    constructor() {\n      return exports.setup(Object.create(new.target.prototype), globalObject, undefined);\n    }\n    parseFromString(str, type) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"'parseFromString' called on an object that is not a valid instance of DOMParser.\");\n      }\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = SupportedType.convert(curArg, {\n          context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].parseFromString(...args));\n    }\n  }\n  Object.defineProperties(DOMParser.prototype, {\n    parseFromString: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"DOMParser\",\n      configurable: true\n    }\n  });\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n  globalObject[ctorRegistrySymbol][interfaceName] = DOMParser;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: DOMParser\n  });\n};\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");","map":{"version":3,"names":["conversions","require","utils","SupportedType","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","context","implForWrapper","TypeError","makeWrapper","globalObject","undefined","Error","ctor","Object","create","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","DOMParser","constructor","target","parseFromString","str","type","esValue","arguments","length","args","curArg","push","tryWrapperForImpl","defineProperties","enumerable","Symbol","toStringTag","writable"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/generated/DOMParser.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst SupportedType = require(\"./SupportedType.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"DOMParser\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new TypeError(`${context} is not of type 'DOMParser'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"DOMParser\"];\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor DOMParser is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  class DOMParser {\n    constructor() {\n      return exports.setup(Object.create(new.target.prototype), globalObject, undefined);\n    }\n\n    parseFromString(str, type) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"'parseFromString' called on an object that is not a valid instance of DOMParser.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\n          \"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = SupportedType.convert(curArg, {\n          context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].parseFromString(...args));\n    }\n  }\n  Object.defineProperties(DOMParser.prototype, {\n    parseFromString: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"DOMParser\", configurable: true }\n  });\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n  globalObject[ctorRegistrySymbol][interfaceName] = DOMParser;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: DOMParser\n  });\n};\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}