{"ast":null,"code":"module.exports = function () {\n  var dnsd = require('hbo-dnsd'),\n    dns = require('native-dns');\n  function Dns(config) {\n    var $this = this;\n    this.config = {};\n    this.config.host = process.env.DNSINTERFACE || config.dns.host;\n    this.config.port = process.env.DNSPORT || config.dns.port;\n    this.config.zone = process.env.DNSZONE || config.dns.zone;\n    this.config.ttl = process.env.DNSTTL || config.dns.ttl;\n    this.config.prefix = process.env.DNSPREFIX || config.dns.prefix;\n    this.config.primary = process.env.DNSPRIMARY || config.dns.primary;\n    this.config.secondary = process.env.DNSSECONDARY || config.dns.secondary;\n    this.config.timeout = process.env.DNSTIMEOUT || config.dns.timeout;\n    this.store = config.store;\n    this.meta = config.meta;\n    this.logger = config.logger;\n    this.logger.log('debug', \"dns-config=%j\", this.config, this.meta);\n    this.logger.log('debug', \"env=%j\", process.env, this.meta);\n    this.logger.log('debug', \"store=%j\", config.store, this.meta);\n  }\n  Dns.prototype.nativeDNS = function (dnsAddress, question, hostname, req, res, next) {\n    var timedout = false;\n    var $this = this,\n      nativeQuestion = dns.Question({\n        name: question.name,\n        type: question.type\n      }),\n      nativeReq = dns.Request({\n        question: nativeQuestion,\n        server: {\n          address: dnsAddress,\n          port: 53,\n          type: 'udp'\n        },\n        timeout: $this.config.timeout\n      });\n    nativeReq.on('timeout', function () {\n      if (dnsAddress === $this.config.secondary) {\n        $this.logger.log('error', '%s:%s/%s - %s - %s question:\"%s\" - %j -- timeout', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n        return next(new Error('DNS:nativeDNS:timeout: ' + $this.config.secondary));\n      }\n      $this.logger.log('warn', '%s:%s/%s - %s - %s question:\"%s\" - %j -- timeout', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n      timedout = true;\n      $this.nativeDNS($this.config.secondary, question, hostname, req, res, next);\n    });\n    nativeReq.on('message', function (err, answer) {\n      answer.answer.forEach(function (oneAnswer) {\n        answer = {\n          name: hostname,\n          type: question.type,\n          class: question.class,\n          data: oneAnswer.address,\n          ttl: oneAnswer.ttl\n        };\n        res.answer.push(answer);\n      });\n    });\n    nativeReq.on('end', function () {\n      if (!timedout) {\n        $this.logger.log('info', '%s:%s/%s - %s - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n        next(null);\n      }\n    });\n    nativeReq.send();\n  };\n  Dns.prototype.resolver = function (req, res) {\n    var $this = this,\n      question = res.question[0],\n      hostname = question.name,\n      length = hostname.length,\n      answer = {},\n      key = this.config.prefix + hostname;\n    this.store.get(key, function (err, value) {\n      $this.logger.log('debug', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s] err[%j]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, err, $this.meta);\n      var object;\n      if (!err && value) {\n        try {\n          object = JSON.parse(value);\n          $this.logger.log('debug', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s] == object[%j]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, object, $this.meta);\n        } catch (e) {\n          err = new Error(\"Exception [\" + util.inspect(e, true) + \"] while parsing store response [\" + value + \"]\");\n          $this.logger.log('error', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, $this.meta);\n        }\n      }\n      if (!err && object && object.hasOwnProperty(question.type)) {\n        answer = {\n          name: hostname,\n          type: question.type,\n          class: question.class,\n          ttl: $this.config.ttl\n        };\n        if (object[question.type]) {\n          var vector = object[question.type] instanceof Array ? object[question.type] : [object[question.type]];\n          vector.forEach(function (data) {\n            answer.data = '' + data;\n            res.answer.push(answer);\n            $this.logger.log('info', '%s:%s/%s - local - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, answer, $this.meta);\n          });\n        } else {\n          res.answer.push(answer);\n          $this.logger.log('info', '%s:%s/%s - local - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, answer, $this.meta);\n        }\n        return res.end();\n      }\n      // Log the error and try with the external DNS\n      if (err) {\n        $this.logger.log('error', 'dns/local GET hostname \"%s\" - err=%j', hostname, err, $this.meta);\n      }\n      // Send the requestion to the DNSPRIMARY and DNSSECONDARY\n      $this.nativeDNS($this.config.primary, question, hostname, req, res, function (err) {\n        if (err) {\n          $this.logger.log('error', '%s:%s/%s - local - %s question:\"%s\" - %j -- ERROR:%j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, res.answer, err, $this.meta);\n        }\n        res.end();\n      });\n    });\n  };\n  Dns.prototype.start = function () {\n    var $this = this;\n    this.server = dnsd.createServer(function (req, res) {\n      $this.resolver(req, res);\n    });\n    this.server.zone($this.config.zone, 'ns1.' + $this.config.zone, 'us@' + $this.config.zone, 'now', '2h', '30m', '2w', '10m').listen($this.config.port, $this.config.host);\n  };\n  function create(pkgConfig) {\n    return new Dns(pkgConfig);\n  }\n  return {\n    create: create\n  };\n}();","map":{"version":3,"names":["module","exports","dnsd","require","dns","Dns","config","$this","host","process","env","DNSINTERFACE","port","DNSPORT","zone","DNSZONE","ttl","DNSTTL","prefix","DNSPREFIX","primary","DNSPRIMARY","secondary","DNSSECONDARY","timeout","DNSTIMEOUT","store","meta","logger","log","prototype","nativeDNS","dnsAddress","question","hostname","req","res","next","timedout","nativeQuestion","Question","name","type","nativeReq","Request","server","address","on","connection","remoteAddress","remotePort","answer","Error","err","forEach","oneAnswer","class","data","push","send","resolver","length","key","get","value","object","JSON","parse","e","util","inspect","hasOwnProperty","vector","Array","end","start","createServer","listen","create","pkgConfig"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/dns/lib/dns.js"],"sourcesContent":["module.exports = function () {\n    var dnsd   = require('hbo-dnsd'),\n        dns    = require('native-dns');\n\n    function Dns(config) {\n        var $this    = this;\n        this.config  = {};\n        this.config.host       = process.env.DNSINTERFACE             || config.dns.host;\n        this.config.port       = process.env.DNSPORT                  || config.dns.port;\n        this.config.zone       = process.env.DNSZONE                  || config.dns.zone;\n        this.config.ttl        = process.env.DNSTTL                   || config.dns.ttl;\n        this.config.prefix     = process.env.DNSPREFIX                || config.dns.prefix;\n        this.config.primary    = process.env.DNSPRIMARY               || config.dns.primary;\n        this.config.secondary  = process.env.DNSSECONDARY             || config.dns.secondary;\n        this.config.timeout    = process.env.DNSTIMEOUT               || config.dns.timeout;\n        this.store             = config.store;\n        this.meta              = config.meta;\n        this.logger            = config.logger;\n        this.logger.log('debug', \"dns-config=%j\", this.config, this.meta);\n        this.logger.log('debug', \"env=%j\", process.env, this.meta);\n        this.logger.log('debug', \"store=%j\", config.store, this.meta);\n    }\n\n    Dns.prototype.nativeDNS = function (dnsAddress, question, hostname, req, res, next) {\n        var timedout = false;\n        var $this = this,\n            nativeQuestion = dns.Question({\n                                name : question.name,\n                                type : question.type\n                             }),\n            nativeReq = dns.Request({\n                            question : nativeQuestion,\n                            server   : { \n                                address : dnsAddress, \n                                port    : 53, \n                                type    : 'udp'\n                            },\n                            timeout: $this.config.timeout\n                        });\n\n        nativeReq.on('timeout', function () {\n            if (dnsAddress === $this.config.secondary) {\n                $this.logger.log('error', '%s:%s/%s - %s - %s question:\"%s\" - %j -- timeout', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n                return next(new Error('DNS:nativeDNS:timeout: ' + $this.config.secondary));\n            }\n            $this.logger.log('warn', '%s:%s/%s - %s - %s question:\"%s\" - %j -- timeout', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n            timedout = true;\n            $this.nativeDNS($this.config.secondary, question, hostname, req, res, next);\n        });\n\n        nativeReq.on('message', function (err, answer) {\n            answer.answer.forEach(function (oneAnswer) {\n                answer = {\n                    name : hostname,\n                    type : question.type,\n                    class: question.class,\n                    data : oneAnswer.address,\n                    ttl  : oneAnswer.ttl\n                };\n                res.answer.push(answer);\n            });\n        });\n\n        nativeReq.on('end', function () {\n            if (!timedout) {\n                $this.logger.log('info', '%s:%s/%s - %s - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, dnsAddress, hostname, question, res.answer, $this.meta);\n                next(null);\n            }\n        });\n\n        nativeReq.send();\n    };\n\n    Dns.prototype.resolver = function(req, res) {\n        var $this        = this,\n            question     = res.question[0], \n            hostname     = question.name, \n            length       = hostname.length, \n            answer       = {},\n            key          = this.config.prefix + hostname;\n\n        this.store.get(key, function (err, value) {\n            $this.logger.log('debug', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s] err[%j]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, err, $this.meta);\n            var object;\n\n            if (!err && value) {\n                try {\n                    object = JSON.parse(value);\n                    $this.logger.log('debug', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s] == object[%j]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, object, $this.meta);\n                } catch (e) {\n                    err = new Error(\"Exception [\" + util.inspect(e, true) + \"] while parsing store response [\" + value + \"]\");\n                    $this.logger.log('error', '%s:%s/%s - local - %s question:\"%s\" - store key[%s] value[%s]', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, key, value, $this.meta);\n                }\n            }\n            if (!err && object && object.hasOwnProperty(question.type)) {\n                answer = {\n                    name: hostname,\n                    type: question.type,\n                    class: question.class,\n                    ttl: $this.config.ttl\n                };\n                if (object[question.type]) {\n                    var vector = object[question.type] instanceof Array ? object[question.type] : [object[question.type]];\n                    vector.forEach(function(data) {\n                        answer.data = ''+data;\n                        res.answer.push(answer);\n                        $this.logger.log('info', '%s:%s/%s - local - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, answer, $this.meta);\n                    });\n                } else {\n                    res.answer.push(answer);\n                    $this.logger.log('info', '%s:%s/%s - local - %s question:\"%s\" - %j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, answer, $this.meta);\n                }\n                return res.end();\n            }\n            // Log the error and try with the external DNS\n            if (err) {\n                $this.logger.log('error', 'dns/local GET hostname \"%s\" - err=%j', hostname, err, $this.meta);\n            }\n            // Send the requestion to the DNSPRIMARY and DNSSECONDARY\n            $this.nativeDNS($this.config.primary, question, hostname, req, res, function (err) {\n                if (err) {\n                    $this.logger.log('error', '%s:%s/%s - local - %s question:\"%s\" - %j -- ERROR:%j', req.connection.remoteAddress, req.connection.remotePort, req.connection.type, hostname, question, res.answer, err, $this.meta);\n                }\n                res.end();\n            });\n        });\n    };\n\n    Dns.prototype.start = function() {\n        var $this = this;\n        this.server = dnsd.createServer(function (req, res) {\n            $this.resolver(req, res);\n        });\n\n        this.server.zone($this.config.zone, \n                         'ns1.'+$this.config.zone, \n                         'us@'+$this.config.zone, \n                         'now', '2h', '30m', '2w', '10m'\n                        ).listen($this.config.port, $this.config.host);\n    };\n\n    function create(pkgConfig) {\n        return new Dns(pkgConfig);\n    }\n\n    return {\n        create : create\n    };\n}();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}