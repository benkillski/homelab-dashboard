{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\nmodule.exports = (buffer, {\n  transportLayerEncodingLabel,\n  defaultEncoding = \"windows-1252\"\n} = {}) => {\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n  return encoding;\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = buffer[i + 1];\n      const c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5];\n      // !-- (comment start)\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n        for (; i < l; i++) {\n          c = buffer[i];\n          const cMinus1 = buffer[i - 1];\n          const cMinus2 = buffer[i - 2];\n          // --> (comment end)\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) && (c2 === 0x45 || c2 === 0x65) && (c3 === 0x54 || c3 === 0x74) && (c4 === 0x41 || c4 === 0x61) && (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n          i = attrRes.i;\n        } while (attrRes.attr);\n        if (needPragma === null) {\n          continue;\n        }\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n        if (charset === null) {\n          continue;\n        }\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n        return charset;\n      } else if (c1 >= 0x41 && c1 <= 0x5A || c1 >= 0x61 && c1 <= 0x7A) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // space or >\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // >\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i];\n    // space or /\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    }\n    // \">\"\n    if (c === 0x3E) {\n      break;\n    }\n    let name = \"\";\n    let value = \"\";\n    nameLoop: for (; i < l; i++) {\n      c = buffer[i];\n      // \"=\"\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      }\n      // space\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i];\n          // space\n          if (isSpaceCharacter(c)) {\n            continue;\n          }\n          // not \"=\"\n          if (c !== 0x3D) {\n            return {\n              attr: {\n                name,\n                value\n              },\n              i\n            };\n          }\n          i++;\n          break nameLoop;\n        }\n        break;\n      }\n      // / or >\n      if (c === 0x2F || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      }\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n    c = buffer[i];\n    // space\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        // space\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    }\n    // \" or '\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        if (c === quote) {\n          i++;\n          return {\n            attr: {\n              name,\n              value\n            },\n            i\n          };\n        }\n\n        // A-Z\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    }\n\n    // >\n    if (c === 0x3E) {\n      return {\n        attr: {\n          name,\n          value\n        },\n        i\n      };\n    }\n\n    // A-Z\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n    for (i++; i < l; i++) {\n      c = buffer[i];\n\n      // space or >\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      }\n\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n  return {\n    i\n  };\n}\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/i);\n    if (indexOfCharset === -1) {\n      return null;\n    }\n    let subPosition = position + indexOfCharset + \"charset\".length;\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n    ++subPosition;\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n    position = subPosition;\n    break;\n  }\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    }\n\n    // It is an unmatched quotation mark\n    return null;\n  }\n  if (string.length === position + 1) {\n    return null;\n  }\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ? string.length : position + indexOfASCIIWhitespaceOrSemicolon + 1;\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}","map":{"version":3,"names":["whatwgEncoding","require","module","exports","buffer","transportLayerEncodingLabel","defaultEncoding","encoding","getBOMEncoding","undefined","labelToName","prescanMetaCharset","l","Math","min","length","i","c","c1","c2","c3","c4","c5","cMinus1","cMinus2","isSpaceCharacter","attributeList","Set","gotPragma","needPragma","charset","attrRes","getAttribute","attr","has","name","add","value","extractCharacterEncodingFromMeta","nameLoop","String","fromCharCode","quote","string","position","indexOfCharset","substring","search","subPosition","charCodeAt","nextIndex","indexOf","indexOfASCIIWhitespaceOrSemicolon","end"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js"],"sourcesContent":["\"use strict\";\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\nmodule.exports = (buffer, { transportLayerEncodingLabel, defaultEncoding = \"windows-1252\" } = {}) => {\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n\n  return encoding;\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = buffer[i + 1];\n      const c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5];\n      // !-- (comment start)\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n        for (; i < l; i++) {\n          c = buffer[i];\n          const cMinus1 = buffer[i - 1];\n          const cMinus2 = buffer[i - 2];\n          // --> (comment end)\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) &&\n         (c2 === 0x45 || c2 === 0x65) &&\n         (c3 === 0x54 || c3 === 0x74) &&\n         (c4 === 0x41 || c4 === 0x61) &&\n         (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if ((c1 >= 0x41 && c1 <= 0x5A) || (c1 >= 0x61 && c1 <= 0x7A)) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // space or >\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // >\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i];\n    // space or /\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    }\n    // \">\"\n    if (c === 0x3E) {\n      break;\n    }\n    let name = \"\";\n    let value = \"\";\n    nameLoop:for (; i < l; i++) {\n      c = buffer[i];\n      // \"=\"\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      }\n      // space\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i];\n          // space\n          if (isSpaceCharacter(c)) {\n            continue;\n          }\n          // not \"=\"\n          if (c !== 0x3D) {\n            return { attr: { name, value }, i };\n          }\n\n          i++;\n          break nameLoop;\n        }\n        break;\n      }\n      // / or >\n      if (c === 0x2F || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n    c = buffer[i];\n    // space\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        // space\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    }\n    // \" or '\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return { attr: { name, value }, i };\n        }\n\n        // A-Z\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    }\n\n    // >\n    if (c === 0x3E) {\n      return { attr: { name, value }, i };\n    }\n\n    // A-Z\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i];\n\n      // space or >\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n  return { i };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/i);\n\n    if (indexOfCharset === -1) {\n      return null;\n    }\n    let subPosition = position + indexOfCharset + \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    }\n\n    // It is an unmatched quotation mark\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ?\n    string.length :\n    position + indexOfASCIIWhitespaceOrSemicolon + 1;\n\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}