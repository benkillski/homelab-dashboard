{"ast":null,"code":"var _jsxFileName = \"D:\\\\benki\\\\Programming\\\\GitHub\\\\homelab-dashboard\\\\client\\\\homelab-dashboard\\\\src\\\\ServicesSection.js\";\nimport React from \"react\";\nimport Service from \"./Service\";\nimport * as config from \"./config\";\nfunction ServicesSection() {\n  const servicesConfig = config.servicesConfigLoader();\n  useEffect(() => {\n    // Function to be executed every second\n    const updateSystemInfo = () => {\n      systemConnector.getCpuUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setCpuUtilizationPercent(result);\n        }\n      });\n      systemConnector.getMemoryUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setMemUtilizationPercent(result);\n        }\n      });\n      systemConnector.getFreeDiskSpace((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setFreeDiskSpace(result);\n        }\n      });\n      systemConnector.getTotalDiskSpace((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          setTotalDiskSpace(result);\n        }\n      });\n    };\n\n    // Set up the interval\n    const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures that the effect runs only once\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"services-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Services\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"services-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Service, {\n    serviceURL: \"http://###.###.###.###:###\",\n    imgPath: \"#\",\n    altText: \"#\",\n    serviceName: \"Proxmox VE\",\n    ipAddress: \"\",\n    hostName: \"pve\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Service, {\n    serviceURL: \"http://nas-omv\",\n    imgPath: \"#\",\n    altText: \"#\",\n    serviceName: \"Open Media Vault - NAS\",\n    ipAddress: \"\",\n    hostName: \"nas-omv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Service, {\n    serviceURL: \"http://###.###.###.###:###\",\n    imgPath: \"#\",\n    altText: \"#\",\n    serviceName: \"Supermico IMPI\",\n    ipAddress: \"\",\n    hostName: \"SMC-X8SIL-F\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  })));\n}\nexport default ServicesSection;","map":{"version":3,"names":["React","Service","config","ServicesSection","servicesConfig","servicesConfigLoader","useEffect","updateSystemInfo","systemConnector","getCpuUtilization","error","result","console","setCpuUtilizationPercent","getMemoryUtilization","setMemUtilizationPercent","getFreeDiskSpace","setFreeDiskSpace","getTotalDiskSpace","setTotalDiskSpace","intervalId","setInterval","clearInterval","createElement","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","serviceURL","imgPath","altText","serviceName","ipAddress","hostName"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/src/ServicesSection.js"],"sourcesContent":["import React from \"react\";\r\nimport Service from \"./Service\";\r\nimport * as config from \"./config\"\r\n\r\nfunction ServicesSection() {\r\n\r\n    const servicesConfig = config.servicesConfigLoader();\r\n    useEffect(() => {\r\n        // Function to be executed every second\r\n        const updateSystemInfo = () => {\r\n          \r\n          systemConnector.getCpuUtilization((error, result) => {\r\n            if(error) {\r\n              console.error(error);\r\n            }\r\n            else {\r\n              setCpuUtilizationPercent(result);\r\n            }\r\n          });\r\n    \r\n          systemConnector.getMemoryUtilization((error, result) => {\r\n            if(error) {\r\n              console.error(error);\r\n            }\r\n            else {\r\n              setMemUtilizationPercent(result);\r\n            }\r\n          });\r\n    \r\n          systemConnector.getFreeDiskSpace((error, result) => {\r\n            if(error) {\r\n              console.error(error);\r\n            }\r\n            else {\r\n              setFreeDiskSpace(result);\r\n            }\r\n          });\r\n    \r\n          systemConnector.getTotalDiskSpace((error, result) => {\r\n            if(error) {\r\n              console.error(error);\r\n            }\r\n            else {\r\n              setTotalDiskSpace(result);\r\n            }\r\n          });\r\n        };\r\n    \r\n        // Set up the interval\r\n        const intervalId = setInterval(updateSystemInfo, 1000); // 1000 milliseconds = 1 second\r\n    \r\n        // Clean up the interval when the component unmounts\r\n        return () => clearInterval(intervalId);\r\n      }, []); // Empty dependency array ensures that the effect runs only once\r\n    \r\n    return (\r\n        <div id=\"services-section\">\r\n            <h2>Services</h2>\r\n            <div id=\"services-container\">\r\n\r\n                <Service \r\n                    serviceURL={\"http://###.###.###.###:###\"}\r\n                    imgPath={\"#\"}\r\n                    altText={\"#\"}\r\n                    serviceName={\"Proxmox VE\"}\r\n                    ipAddress={\"\"}\r\n                    hostName={\"pve\"}\r\n                />\r\n                <Service \r\n                    serviceURL={\"http://nas-omv\"}\r\n                    imgPath={\"#\"}\r\n                    altText={\"#\"}\r\n                    serviceName={\"Open Media Vault - NAS\"}\r\n                    ipAddress={\"\"}\r\n                    hostName={\"nas-omv\"}\r\n                />\r\n                <Service \r\n                    serviceURL={\"http://###.###.###.###:###\"}\r\n                    imgPath={\"#\"}\r\n                    altText={\"#\"}\r\n                    serviceName={\"Supermico IMPI\"}\r\n                    ipAddress={\"\"}\r\n                    hostName={\"SMC-X8SIL-F\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ServicesSection;"],"mappings":"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"},"metadata":{},"sourceType":"module"}