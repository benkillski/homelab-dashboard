{"ast":null,"code":"\"use strict\";\n\n// This files implements the calculation of the offset between the global monotonic clock and UNIX time. This value is\n// known as |t1| in the calculation of \"time origin timestamp\" in the spec. This value needs to be calculated once and\n// can be used in all subsequent Performance instances.\n//\n// However, if the clock is not fast enough, the export is undefined to signify that we should use Date.now() to get the\n// time origin timestamp with millisecond accuracy, per spec.\nconst {\n  getGlobalMonotonicClockMS\n} = require(\"./global-monotonic-clock\");\nconst clockIsAccurate = require(\"./clock-is-accurate\");\n\n// This function assumes the clock is accurate.\nfunction calculateClockOffset() {\n  const start = Date.now();\n  let cur = start;\n  // Limit the iterations, just in case we're running in an environment where Date.now() has been mocked and is\n  // constant.\n  for (let i = 0; i < 1e6 && cur === start; i++) {\n    cur = Date.now();\n  }\n\n  // At this point |cur| \"just\" became equal to the next millisecond -- the unseen digits after |cur| are approximately\n  // all 0, and |cur| is the closest to the actual value of the UNIX time. Now, get the current global monotonic clock\n  // value and do the remaining calculations.\n\n  return cur - getGlobalMonotonicClockMS();\n}\nif (clockIsAccurate) {\n  // Warm up the function.\n  calculateClockOffset();\n  calculateClockOffset();\n  calculateClockOffset();\n  module.exports = calculateClockOffset;\n} else {\n  module.exports = undefined;\n}","map":{"version":3,"names":["getGlobalMonotonicClockMS","require","clockIsAccurate","calculateClockOffset","start","Date","now","cur","i","module","exports","undefined"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/w3c-hr-time/lib/calculate-clock-offset.js"],"sourcesContent":["\"use strict\";\n\n// This files implements the calculation of the offset between the global monotonic clock and UNIX time. This value is\n// known as |t1| in the calculation of \"time origin timestamp\" in the spec. This value needs to be calculated once and\n// can be used in all subsequent Performance instances.\n//\n// However, if the clock is not fast enough, the export is undefined to signify that we should use Date.now() to get the\n// time origin timestamp with millisecond accuracy, per spec.\n\nconst { getGlobalMonotonicClockMS } = require(\"./global-monotonic-clock\");\nconst clockIsAccurate = require(\"./clock-is-accurate\");\n\n// This function assumes the clock is accurate.\nfunction calculateClockOffset() {\n  const start = Date.now();\n  let cur = start;\n  // Limit the iterations, just in case we're running in an environment where Date.now() has been mocked and is\n  // constant.\n  for (let i = 0; i < 1e6 && cur === start; i++) {\n    cur = Date.now();\n  }\n\n  // At this point |cur| \"just\" became equal to the next millisecond -- the unseen digits after |cur| are approximately\n  // all 0, and |cur| is the closest to the actual value of the UNIX time. Now, get the current global monotonic clock\n  // value and do the remaining calculations.\n\n  return cur - getGlobalMonotonicClockMS();\n}\n\nif (clockIsAccurate) {\n  // Warm up the function.\n  calculateClockOffset();\n  calculateClockOffset();\n  calculateClockOffset();\n\n  module.exports = calculateClockOffset;\n} else {\n  module.exports = undefined;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;EAAEA;AAA0B,CAAC,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACzE,MAAMC,eAAe,GAAGD,OAAO,CAAC,qBAAqB,CAAC;;AAEtD;AACA,SAASE,oBAAoBA,CAAA,EAAG;EAC9B,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EACxB,IAAIC,GAAG,GAAGH,KAAK;EACf;EACA;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,IAAID,GAAG,KAAKH,KAAK,EAAEI,CAAC,EAAE,EAAE;IAC7CD,GAAG,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC;EAClB;;EAEA;EACA;EACA;;EAEA,OAAOC,GAAG,GAAGP,yBAAyB,CAAC,CAAC;AAC1C;AAEA,IAAIE,eAAe,EAAE;EACnB;EACAC,oBAAoB,CAAC,CAAC;EACtBA,oBAAoB,CAAC,CAAC;EACtBA,oBAAoB,CAAC,CAAC;EAEtBM,MAAM,CAACC,OAAO,GAAGP,oBAAoB;AACvC,CAAC,MAAM;EACLM,MAAM,CAACC,OAAO,GAAGC,SAAS;AAC5B"},"metadata":{},"sourceType":"script","externalDependencies":[]}