{"ast":null,"code":"// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Server routines\n\nrequire('defaultable')(module, {}, function (module, exports, DEFS, require) {\n  var net = require('net');\n  var util = require('util');\n  var dgram = require('dgram');\n  var events = require('events');\n  var Message = require('./message');\n  var convenient = require('./convenient');\n  module.exports = createServer;\n  function createServer(handler) {\n    return new Server(handler);\n  }\n  util.inherits(Server, events.EventEmitter);\n  function Server(handler) {\n    var self = this;\n    events.EventEmitter.call(self);\n    self.log = console;\n    self.zones = {};\n    if (handler) self.on('request', handler);\n    self.udp = dgram.createSocket('udp4');\n    self.tcp = net.createServer();\n    self.udp.on('close', function () {\n      self.close();\n    });\n    self.tcp.on('close', function () {\n      self.close();\n    });\n    self.udp.on('error', function (er) {\n      self.emit('error', er);\n    });\n    self.tcp.on('error', function (er) {\n      self.emit('error', er);\n    });\n    self.tcp.on('connection', function (connection) {\n      self.on_tcp_connection(connection);\n    });\n    self.udp.on('message', function (msg, rinfo) {\n      self.on_udp(msg, rinfo);\n    });\n    var listening = {\n      'tcp': false,\n      'udp': false\n    };\n    self.udp.once('listening', function () {\n      listening.udp = true;\n      if (listening.tcp) self.emit('listening');\n    });\n    self.tcp.once('listening', function () {\n      listening.tcp = true;\n      if (listening.udp) self.emit('listening');\n    });\n  }\n  Server.prototype.zone = function (zone, server, admin, serial, refresh, retry, expire, ttl) {\n    var self = this,\n      record = zone;\n    if (typeof record != 'object') record = {\n      'class': 'IN',\n      'type': 'SOA',\n      'name': zone,\n      'data': {\n        'mname': server,\n        'rname': admin,\n        'serial': convenient.serial(serial),\n        'refresh': convenient.seconds(refresh),\n        'retry': convenient.seconds(retry),\n        'expire': convenient.seconds(expire),\n        'ttl': convenient.seconds(ttl || 0)\n      }\n    };\n    self.zones[record.name] = record;\n    return self;\n  };\n  Server.prototype.listen = function (port, ip, callback) {\n    var self = this;\n    if (typeof ip === 'function') {\n      callback = ip;\n      ip = null;\n    }\n    self.port = port;\n    self.ip = ip || '0.0.0.0';\n    if (typeof callback === 'function') self.on('listening', callback);\n    self.udp.bind(port, ip);\n    self.tcp.listen(port, ip);\n    return self;\n  };\n  Server.prototype.close = function () {\n    var self = this;\n    if (self.udp._receiving) self.udp.close();\n    if (self.tcp._handle) self.tcp.close(function () {\n      self.emit('close');\n    });\n  };\n  Server.prototype.unref = function () {\n    this.udp.unref();\n    this.tcp.unref();\n  };\n  Server.prototype.ref = function () {\n    this.udp.ref();\n    this.tcp.ref();\n  };\n  Server.prototype.on_tcp_connection = function (connection) {\n    var self = this;\n    var length = null,\n      bufs = [];\n    connection.type = 'tcp';\n    connection.server = self;\n    connection.on('data', function (data) {\n      bufs.push(data);\n      var bytes_received = bufs.reduce(function (state, buf) {\n        return state + buf.length;\n      }, 0);\n      if (length === null && bytes_received >= 2) {\n        var so_far = Buffer.concat(bufs); // Flatten them all together, it's probably not much data.\n        length = so_far.readUInt16BE(0);\n        bufs = [so_far.slice(2)];\n      }\n      if (length !== null && bytes_received == 2 + length) {\n        // All of the data (plus the 2-byte length prefix) is received.\n        var data = Buffer.concat(bufs),\n          req = new Request(data, connection),\n          res = new Response(data, connection);\n        self.emit('request', req, res);\n      }\n    });\n  };\n  Server.prototype.on_udp = function (data, rinfo) {\n    var self = this;\n\n    // Provide something that feels like a net.Socket, which in turn feels like the http API.\n    var connection = {\n      'type': self.udp.type,\n      'remoteAddress': rinfo.address,\n      'remotePort': rinfo.port,\n      'server': self,\n      'send': function () {\n        self.udp.send.apply(self.udp, arguments);\n      },\n      'destroy': function () {},\n      'end': function () {}\n    };\n    var req = new Request(data, connection),\n      res = new Response(data, connection);\n    self.emit('request', req, res);\n  };\n  util.inherits(Request, Message);\n  function Request(data, connection) {\n    var self = this;\n    Message.call(self, data);\n    self.connection = connection;\n  }\n  Request.prototype.toJSON = function () {\n    var self = this;\n    var obj = {};\n    Object.keys(self).forEach(function (key) {\n      if (key != 'connection') obj[key] = self[key];\n    });\n    return obj;\n  };\n  util.inherits(Response, Message);\n  function Response(data, connection) {\n    var self = this;\n    Message.call(self, data);\n    self.question = self.question || [];\n    self.answer = self.answer || [];\n    self.authority = self.authority || [];\n    self.additional = self.additional || [];\n    self.connection = connection;\n    convenient.init_response(self);\n  }\n  Response.prototype.toJSON = Request.prototype.toJSON;\n  Response.prototype.end = function (value) {\n    var self = this;\n    var msg = convenient.final_response(self, value),\n      data = msg.toBinary();\n    if (self.connection.type == 'udp4' && data.length > 512) return self.emit('error', 'UDP responses greater than 512 bytes not yet implemented');else if (self.connection.type == 'udp4') self.connection.send(data, 0, data.length, self.connection.remotePort, self.connection.remoteAddress, function (er) {\n      if (er) self.emit('error', er);\n    });else if (self.connection.type == 'tcp') {\n      // Add the data length prefix.\n      var length = data.length;\n      data = Buffer.concat([new Buffer([length >> 8, length & 255]), data]);\n      self.connection.end(data, function (er) {\n        if (er) self.emit('error', er);\n      });\n    } else self.emit('error', new Error('Unknown connection type: ' + self.connection.type));\n  };\n}); // defaultable","map":{"version":3,"names":["require","module","exports","DEFS","net","util","dgram","events","Message","convenient","createServer","handler","Server","inherits","EventEmitter","self","call","log","console","zones","on","udp","createSocket","tcp","close","er","emit","connection","on_tcp_connection","msg","rinfo","on_udp","listening","once","prototype","zone","server","admin","serial","refresh","retry","expire","ttl","record","seconds","name","listen","port","ip","callback","bind","_receiving","_handle","unref","ref","length","bufs","type","data","push","bytes_received","reduce","state","buf","so_far","Buffer","concat","readUInt16BE","slice","req","Request","res","Response","address","send","apply","arguments","destroy","end","toJSON","obj","Object","keys","forEach","key","question","answer","authority","additional","init_response","value","final_response","toBinary","remotePort","remoteAddress","Error"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/hbo-dnsd/server.js"],"sourcesContent":["// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Server routines\n\nrequire('defaultable')(module,\n  {\n  }, function(module, exports, DEFS, require) {\n\nvar net = require('net')\nvar util = require('util')\nvar dgram = require('dgram')\nvar events = require('events')\n\nvar Message = require('./message')\nvar convenient = require('./convenient')\n\nmodule.exports = createServer\n\nfunction createServer(handler) {\n  return new Server(handler)\n}\n\n\nutil.inherits(Server, events.EventEmitter)\nfunction Server (handler) {\n  var self = this\n  events.EventEmitter.call(self)\n\n  self.log = console\n  self.zones = {}\n\n  if(handler)\n    self.on('request', handler)\n\n  self.udp = dgram.createSocket('udp4')\n  self.tcp = net.createServer()\n\n  self.udp.on('close', function() { self.close() })\n  self.tcp.on('close', function() { self.close() })\n\n  self.udp.on('error', function(er) { self.emit('error', er) })\n  self.tcp.on('error', function(er) { self.emit('error', er) })\n\n  self.tcp.on('connection', function(connection) { self.on_tcp_connection(connection) })\n  self.udp.on('message', function(msg, rinfo) { self.on_udp(msg, rinfo) })\n\n  var listening = {'tcp':false, 'udp':false}\n  self.udp.once('listening', function() {\n    listening.udp = true\n    if(listening.tcp)\n      self.emit('listening')\n  })\n  self.tcp.once('listening', function() {\n    listening.tcp = true\n    if(listening.udp)\n      self.emit('listening')\n  })\n}\n\nServer.prototype.zone = function(zone, server, admin, serial, refresh, retry, expire, ttl) {\n  var self = this\n    , record = zone\n\n  if(typeof record != 'object')\n    record = { 'class': 'IN'\n             , 'type' : 'SOA'\n             , 'name' : zone\n             , 'data' : { 'mname': server\n                        , 'rname': admin\n                        , 'serial': convenient.serial(serial)\n                        , 'refresh': convenient.seconds(refresh)\n                        , 'retry'  : convenient.seconds(retry)\n                        , 'expire' : convenient.seconds(expire)\n                        , 'ttl'    : convenient.seconds(ttl || 0)\n                        }\n             }\n\n  self.zones[record.name] = record\n  return self\n}\n\nServer.prototype.listen = function(port, ip, callback) {\n  var self = this\n\n  if(typeof ip === 'function') {\n    callback = ip\n    ip = null\n  }\n\n  self.port = port\n  self.ip   = ip || '0.0.0.0'\n\n  if(typeof callback === 'function')\n    self.on('listening', callback)\n\n  self.udp.bind(port, ip)\n  self.tcp.listen(port, ip)\n\n  return self\n}\n\nServer.prototype.close = function() {\n  var self = this\n\n  if(self.udp._receiving)\n    self.udp.close()\n\n  if(self.tcp._handle)\n    self.tcp.close(function() {\n      self.emit('close')\n    })\n}\n\nServer.prototype.unref = function() {\n  this.udp.unref()\n  this.tcp.unref()\n}\n\nServer.prototype.ref = function() {\n  this.udp.ref()\n  this.tcp.ref()\n}\n\nServer.prototype.on_tcp_connection = function(connection) {\n  var self = this\n\n  var length = null\n    , bufs = []\n\n  connection.type = 'tcp'\n  connection.server = self\n\n  connection.on('data', function(data) {\n    bufs.push(data)\n    var bytes_received = bufs.reduce(function(state, buf) { return state + buf.length }, 0)\n\n    if(length === null && bytes_received >= 2) {\n      var so_far = Buffer.concat(bufs) // Flatten them all together, it's probably not much data.\n      length = so_far.readUInt16BE(0)\n      bufs = [ so_far.slice(2) ]\n    }\n\n    if(length !== null && bytes_received == 2 + length) {\n      // All of the data (plus the 2-byte length prefix) is received.\n      var data = Buffer.concat(bufs)\n        , req = new Request(data, connection)\n        , res = new Response(data, connection)\n\n      self.emit('request', req, res)\n    }\n  })\n}\n\nServer.prototype.on_udp = function(data, rinfo) {\n  var self = this\n\n  // Provide something that feels like a net.Socket, which in turn feels like the http API.\n  var connection = { 'type'         : self.udp.type\n                   , 'remoteAddress': rinfo.address\n                   , 'remotePort'   : rinfo.port\n                   , 'server'       : self\n                   , 'send'         : function() { self.udp.send.apply(self.udp, arguments) }\n                   , 'destroy'      : function() {}\n                   , 'end'          : function() {}\n                   }\n\n  var req = new Request(data, connection)\n    , res = new Response(data, connection)\n\n  self.emit('request', req, res)\n}\n\n\nutil.inherits(Request, Message)\nfunction Request (data, connection) {\n  var self = this\n  Message.call(self, data)\n\n  self.connection = connection\n}\n\nRequest.prototype.toJSON = function() {\n  var self = this\n  var obj = {}\n  Object.keys(self).forEach(function(key) {\n    if(key != 'connection')\n      obj[key] = self[key]\n  })\n  return obj\n}\n\nutil.inherits(Response, Message)\nfunction Response (data, connection) {\n  var self = this\n  Message.call(self, data)\n\n  self.question   = self.question   || []\n  self.answer     = self.answer     || []\n  self.authority  = self.authority  || []\n  self.additional = self.additional || []\n\n  self.connection = connection\n\n  convenient.init_response(self)\n}\n\nResponse.prototype.toJSON = Request.prototype.toJSON\n\nResponse.prototype.end = function(value) {\n  var self = this\n\n  var msg = convenient.final_response(self, value)\n    , data = msg.toBinary()\n\n  if(self.connection.type == 'udp4' && data.length > 512)\n    return self.emit('error', 'UDP responses greater than 512 bytes not yet implemented')\n\n  else if(self.connection.type == 'udp4')\n    self.connection.send(data, 0, data.length, self.connection.remotePort, self.connection.remoteAddress, function(er) {\n      if(er)\n        self.emit('error', er)\n    })\n\n  else if(self.connection.type == 'tcp') {\n    // Add the data length prefix.\n    var length = data.length\n    data = Buffer.concat([ new Buffer([length >> 8, length & 255]), data ])\n\n    self.connection.end(data, function(er) {\n      if(er)\n        self.emit('error', er)\n    })\n  }\n\n  else\n    self.emit('error', new Error('Unknown connection type: ' + self.connection.type))\n}\n\n\n}) // defaultable\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}