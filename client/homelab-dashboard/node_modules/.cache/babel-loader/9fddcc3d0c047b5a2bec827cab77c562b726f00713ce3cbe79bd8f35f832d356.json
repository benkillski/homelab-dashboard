{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst {\n  stripAndCollapseASCIIWhitespace\n} = require(\"../helpers/strings\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst {\n  HTML_NS,\n  SVG_NS\n} = require(\"../helpers/namespaces\");\nconst {\n  closest\n} = require(\"../helpers/traversal\");\nconst {\n  formOwner\n} = require(\"../helpers/form-controls\");\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n  _attrModified(name, value, oldValue) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n  get form() {\n    return formOwner(this);\n  }\n  get text() {\n    return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n  }\n  set text(value) {\n    this.textContent = value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n    return this.text;\n  }\n  get value() {\n    return this._getValue();\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n    return select.options.indexOf(this);\n  }\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n    this._modified();\n  }\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n    return this.text;\n  }\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n}\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  let text = \"\";\n  for (const child of domSymbolTree.childrenIterator(root)) {\n    if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n      continue;\n    }\n    if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n      text += child.nodeValue;\n    } else {\n      text += childTextContentExcludingDescendantsOfScript(child);\n    }\n  }\n  return text;\n}\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","NODE_TYPE","stripAndCollapseASCIIWhitespace","domSymbolTree","HTML_NS","SVG_NS","closest","formOwner","HTMLOptionElementImpl","constructor","globalObject","args","privateData","_selectedness","_dirtyness","_removeOtherSelectedness","select","_selectNode","hasAttributeNS","option","options","_askForAReset","_askedForAReset","_attrModified","name","value","oldValue","parent","nodeName","toUpperCase","form","text","childTextContentExcludingDescendantsOfScript","textContent","_getValue","getAttributeNS","setAttributeNS","index","indexOf","selected","s","Boolean","_modified","label","root","child","childrenIterator","_localName","_namespaceURI","nodeType","TEXT_NODE","CDATA_SECTION_NODE","nodeValue","module","exports"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n  }\n  set text(value) {\n    this.textContent = value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n}\n\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  let text = \"\";\n  for (const child of domSymbolTree.childrenIterator(root)) {\n    if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n      continue;\n    }\n\n    if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n      text += child.nodeValue;\n    } else {\n      text += childTextContentExcludingDescendantsOfScript(child);\n    }\n  }\n  return text;\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC,CAACC,cAAc;AACpE,MAAMC,SAAS,GAAGF,OAAO,CAAC,cAAc,CAAC;AACzC,MAAM;EAAEG;AAAgC,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACzE,MAAM;EAAEI;AAAc,CAAC,GAAGJ,OAAO,CAAC,+BAA+B,CAAC;AAClE,MAAM;EAAEK,OAAO;EAAEC;AAAO,CAAC,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAM;EAAEO;AAAQ,CAAC,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AACnD,MAAM;EAAEQ;AAAU,CAAC,GAAGR,OAAO,CAAC,0BAA0B,CAAC;AAEzD,MAAMS,qBAAqB,SAASV,eAAe,CAAC;EAClDW,WAAWA,CAACC,YAAY,EAAEC,IAAI,EAAEC,WAAW,EAAE;IAC3C,KAAK,CAACF,YAAY,EAAEC,IAAI,EAAEC,WAAW,CAAC;;IAEtC;IACA;IACA,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACC,UAAU,GAAG,KAAK;EACzB;EAEAC,wBAAwBA,CAAA,EAAG;IACzB;IACA,MAAMC,MAAM,GAAG,IAAI,CAACC,WAAW;IAE/B,IAAID,MAAM,IAAI,CAACA,MAAM,CAACE,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE;MACtD,KAAK,MAAMC,MAAM,IAAIH,MAAM,CAACI,OAAO,EAAE;QACnC,IAAID,MAAM,KAAK,IAAI,EAAE;UACnBA,MAAM,CAACN,aAAa,GAAG,KAAK;QAC9B;MACF;IACF;EACF;EAEAQ,aAAaA,CAAA,EAAG;IACd,MAAML,MAAM,GAAG,IAAI,CAACC,WAAW;IAC/B,IAAID,MAAM,EAAE;MACVA,MAAM,CAACM,eAAe,CAAC,CAAC;IAC1B;EACF;EAEAC,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACnC,IAAI,CAAC,IAAI,CAACZ,UAAU,IAAIU,IAAI,KAAK,UAAU,EAAE;MAC3C,IAAI,CAACX,aAAa,GAAG,IAAI,CAACK,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC;MAC1D,IAAI,IAAI,CAACL,aAAa,EAAE;QACtB,IAAI,CAACE,wBAAwB,CAAC,CAAC;MACjC;MACA,IAAI,CAACM,aAAa,CAAC,CAAC;IACtB;IACA,KAAK,CAACE,aAAa,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC;EAC5C;EAEA,IAAIT,WAAWA,CAAA,EAAG;IAChB,IAAID,MAAM,GAAGb,aAAa,CAACwB,MAAM,CAAC,IAAI,CAAC;IACvC,IAAI,CAACX,MAAM,EAAE;MACX,OAAO,IAAI;IACb;IAEA,IAAIA,MAAM,CAACY,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC9Cb,MAAM,GAAGb,aAAa,CAACwB,MAAM,CAACX,MAAM,CAAC;MACrC,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACY,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;QACzD,OAAO,IAAI;MACb;IACF;IACA,OAAOb,MAAM;EACf;EAEA,IAAIc,IAAIA,CAAA,EAAG;IACT,OAAOvB,SAAS,CAAC,IAAI,CAAC;EACxB;EAEA,IAAIwB,IAAIA,CAAA,EAAG;IACT,OAAO7B,+BAA+B,CAAC8B,4CAA4C,CAAC,IAAI,CAAC,CAAC;EAC5F;EACA,IAAID,IAAIA,CAACN,KAAK,EAAE;IACd,IAAI,CAACQ,WAAW,GAAGR,KAAK;EAC1B;;EAEA;EACAS,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAAChB,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;MACtC,OAAO,IAAI,CAACiB,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC;IAC3C;IAEA,OAAO,IAAI,CAACJ,IAAI;EAClB;EAEA,IAAIN,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACS,SAAS,CAAC,CAAC;EACzB;EACA,IAAIT,KAAKA,CAACA,KAAK,EAAE;IACf,IAAI,CAACW,cAAc,CAAC,IAAI,EAAE,OAAO,EAAEX,KAAK,CAAC;EAC3C;EAEA,IAAIY,KAAKA,CAAA,EAAG;IACV,MAAMrB,MAAM,GAAGV,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;IACtC,IAAIU,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,CAAC;IACV;IAEA,OAAOA,MAAM,CAACI,OAAO,CAACkB,OAAO,CAAC,IAAI,CAAC;EACrC;EAEA,IAAIC,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC1B,aAAa;EAC3B;EACA,IAAI0B,QAAQA,CAACC,CAAC,EAAE;IACd,IAAI,CAAC1B,UAAU,GAAG,IAAI;IACtB,IAAI,CAACD,aAAa,GAAG4B,OAAO,CAACD,CAAC,CAAC;IAC/B,IAAI,IAAI,CAAC3B,aAAa,EAAE;MACtB,IAAI,CAACE,wBAAwB,CAAC,CAAC;IACjC;IACA,IAAI,CAACM,aAAa,CAAC,CAAC;IACpB,IAAI,CAACqB,SAAS,CAAC,CAAC;EAClB;EAEA,IAAIC,KAAKA,CAAA,EAAG;IACV,IAAI,IAAI,CAACzB,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;MACtC,OAAO,IAAI,CAACiB,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC;IAC3C;IAEA,OAAO,IAAI,CAACJ,IAAI;EAClB;EACA,IAAIY,KAAKA,CAAClB,KAAK,EAAE;IACf,IAAI,CAACW,cAAc,CAAC,IAAI,EAAE,OAAO,EAAEX,KAAK,CAAC;EAC3C;AACF;AAEA,SAASO,4CAA4CA,CAACY,IAAI,EAAE;EAC1D,IAAIb,IAAI,GAAG,EAAE;EACb,KAAK,MAAMc,KAAK,IAAI1C,aAAa,CAAC2C,gBAAgB,CAACF,IAAI,CAAC,EAAE;IACxD,IAAIC,KAAK,CAACE,UAAU,KAAK,QAAQ,KAAKF,KAAK,CAACG,aAAa,KAAK5C,OAAO,IAAIyC,KAAK,CAACG,aAAa,KAAK3C,MAAM,CAAC,EAAE;MACxG;IACF;IAEA,IAAIwC,KAAK,CAACI,QAAQ,KAAKhD,SAAS,CAACiD,SAAS,IAAIL,KAAK,CAACI,QAAQ,KAAKhD,SAAS,CAACkD,kBAAkB,EAAE;MAC7FpB,IAAI,IAAIc,KAAK,CAACO,SAAS;IACzB,CAAC,MAAM;MACLrB,IAAI,IAAIC,4CAA4C,CAACa,KAAK,CAAC;IAC7D;EACF;EACA,OAAOd,IAAI;AACb;AAEAsB,MAAM,CAACC,OAAO,GAAG;EACftD,cAAc,EAAEQ;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}