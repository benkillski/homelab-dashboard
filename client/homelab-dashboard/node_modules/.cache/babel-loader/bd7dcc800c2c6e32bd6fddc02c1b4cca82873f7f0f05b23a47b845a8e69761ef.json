{"ast":null,"code":"// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE\n\n'use strict';\n\nvar assert = require('assert');\nvar Heap = function (min) {\n  this.length = 0;\n  this.root = undefined;\n  if (min) {\n    this._comparator = this._smallest;\n  } else {\n    this._comparator = this._largest;\n  }\n};\nHeap.init = function (obj, key) {\n  obj._parent = null;\n  obj._left = null;\n  obj._right = null;\n  obj._key = key;\n  return obj;\n};\nHeap.prototype.count = function (node) {\n  if (!node) return 0;\n  var c = 1;\n  c += this.count(node._left);\n  c += this.count(node._right);\n  return c;\n};\nHeap.prototype.insert = function (obj, key) {\n  var insert, node;\n  this.length += 1;\n  node = Heap.init(obj, key);\n  if (!this.root) {\n    this.root = node;\n  } else {\n    insert = this._last();\n    node._parent = insert;\n    if (!insert._left) insert._left = node;else insert._right = node;\n    this._up(node);\n  }\n  this._head();\n  return node;\n};\nHeap.prototype.pop = function () {\n  var ret, last;\n  if (!this.root) return null;\n  return this.remove(this.root);\n};\nHeap.prototype.remove = function (node) {\n  var ret, last;\n  ret = node;\n  last = this._last();\n  if (last._right) last = last._right;else last = last._left;\n  this.length -= 1;\n  if (!last) {\n    if (ret == this.root) this.root = null;\n    return ret;\n  }\n  if (ret == last) {\n    if (ret._parent._left == node) ret._parent._left = null;else ret._parent._right = null;\n    last = ret._parent;\n    ret._parent = null;\n  } else if (!ret._left && !ret._right) {\n    // we're trying to remove an element without any children and its not the last\n    // move the last under its parent and heap-up\n    if (last._parent._left == last) last._parent._left = null;else last._parent._right = null;\n    if (ret._parent._left == ret) ret._parent._left = last;else ret._parent._right = last;\n    last._parent = ret._parent;\n    ret._parent = null;\n\n    // TODO in this case we shouldn't later also do a down, but it should only visit once\n    this._up(last);\n  } else {\n    this._delete_swap(ret, last);\n  }\n  if (ret == this.root) this.root = last;\n  this._down(last);\n  this._head();\n  return ret;\n};\n\n// TODO this probably isn't the most efficient way to ensure that we're always\n// at the root of the tree, but it works for now\nHeap.prototype._head = function () {\n  if (!this.root) return;\n  var tmp = this.root;\n  while (tmp._parent) {\n    tmp = tmp._parent;\n  }\n  this.root = tmp;\n};\n\n// TODO is there a more efficient way to store this instead of an array?\nHeap.prototype._last = function () {\n  var path, pos, mod, insert;\n  pos = this.length;\n  path = [];\n  while (pos > 1) {\n    mod = pos % 2;\n    pos = Math.floor(pos / 2);\n    path.push(mod);\n  }\n  insert = this.root;\n  while (path.length > 1) {\n    pos = path.pop();\n    if (pos === 0) insert = insert._left;else insert = insert._right;\n  }\n  return insert;\n};\nHeap.prototype._swap = function (a, b) {\n  var cleft, cright, tparent;\n  cleft = b._left;\n  cright = b._right;\n  if (a._parent) {\n    if (a._parent._left == a) a._parent._left = b;else a._parent._right = b;\n  }\n  b._parent = a._parent;\n  a._parent = b;\n\n  // This assumes direct descendents\n  if (a._left == b) {\n    b._left = a;\n    b._right = a._right;\n    if (b._right) b._right._parent = b;\n  } else {\n    b._right = a;\n    b._left = a._left;\n    if (b._left) b._left._parent = b;\n  }\n  a._left = cleft;\n  a._right = cright;\n  if (a._left) a._left._parent = a;\n  if (a._right) a._right._parent = a;\n  assert.notEqual(a._parent, a, \"A shouldn't refer to itself\");\n  assert.notEqual(b._parent, b, \"B shouldn't refer to itself\");\n};\nHeap.prototype._delete_swap = function (a, b) {\n  if (a._left != b) b._left = a._left;\n  if (a._right != b) b._right = a._right;\n  if (b._parent._left == b) b._parent._left = null;else b._parent._right = null;\n  if (a._parent) {\n    if (a._parent._left == a) a._parent._left = b;else a._parent._right = b;\n  }\n  b._parent = a._parent;\n  if (b._left) b._left._parent = b;\n  if (b._right) b._right._parent = b;\n  a._parent = null;\n  a._left = null;\n  a._right = null;\n};\nHeap.prototype._smallest = function (heap) {\n  var small = heap;\n  if (heap._left && heap._key > heap._left._key) {\n    small = heap._left;\n  }\n  if (heap._right && small._key > heap._right._key) {\n    small = heap._right;\n  }\n  return small;\n};\nHeap.prototype._largest = function (heap) {\n  var large = heap;\n  if (heap._left && heap._key < heap._left._key) {\n    large = heap._left;\n  }\n  if (heap._right && large._key < heap._right._key) {\n    large = heap._right;\n  }\n  return large;\n};\nHeap.prototype._up = function (node) {\n  if (!node || !node._parent) return;\n  var next = this._comparator(node._parent);\n  if (next != node._parent) {\n    this._swap(node._parent, node);\n    this._up(node);\n  }\n};\nHeap.prototype._down = function (node) {\n  if (!node) return;\n  var next = this._comparator(node);\n  if (next != node) {\n    this._swap(node, next);\n    this._down(node);\n  }\n};\nvar util = require('util');\nHeap.prototype.print = function (stream) {\n  stream.write('digraph {\\n');\n  Heap._print(this.root, stream);\n  stream.write('}\\n');\n};\nHeap._print = function (heap, stream) {\n  if (!heap) return;\n  if (heap._left) {\n    stream.write(util.format('' + heap._key, '->', heap._left._key, '\\n'));\n    Heap._print(heap._left, stream);\n  }\n  if (heap._right) {\n    stream.write(util.format('' + heap._key, '->', heap._right._key, '\\n'));\n    Heap._print(heap._right, stream);\n  }\n};\nmodule.exports = Heap;","map":{"version":3,"names":["assert","require","Heap","min","length","root","undefined","_comparator","_smallest","_largest","init","obj","key","_parent","_left","_right","_key","prototype","count","node","c","insert","_last","_up","_head","pop","ret","last","remove","_delete_swap","_down","tmp","path","pos","mod","Math","floor","push","_swap","a","b","cleft","cright","tparent","notEqual","heap","small","large","next","util","print","stream","write","_print","format","module","exports"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/binaryheap/binaryheap.js"],"sourcesContent":["// Copyright 2012 Timothy J Fontaine <tjfontaine@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE\n\n'use strict';\n\nvar assert = require('assert');\n\nvar Heap = function(min) {\n  this.length = 0;\n  this.root = undefined;\n  if (min) {\n    this._comparator = this._smallest;\n  } else {\n    this._comparator = this._largest;\n  }\n};\n\nHeap.init = function(obj, key) {\n  obj._parent = null;\n  obj._left = null;\n  obj._right = null;\n  obj._key = key;\n  return obj;\n};\n\nHeap.prototype.count = function (node) {\n  if (!node) return 0;\n\n  var c = 1;\n\n  c += this.count(node._left);\n  c += this.count(node._right);\n\n  return c;\n};\n\nHeap.prototype.insert = function(obj, key) {\n  var insert, node;\n\n  this.length += 1;\n\n  node = Heap.init(obj, key);\n\n  if (!this.root) {\n    this.root = node;\n  } else {\n    insert = this._last();\n\n    node._parent = insert;\n\n    if (!insert._left)\n      insert._left = node;\n    else\n      insert._right = node;\n\n    this._up(node);\n  }\n\n  this._head();\n\n  return node;\n};\n\nHeap.prototype.pop = function() {\n  var ret, last;\n\n  if (!this.root)\n    return null;\n\n  return this.remove(this.root);\n};\n\nHeap.prototype.remove = function(node) {\n  var ret, last;\n\n  ret = node;\n  last = this._last();\n\n  if (last._right)\n    last = last._right;\n  else\n    last = last._left;\n\n  this.length -= 1;\n\n  if (!last) {\n    if (ret == this.root)\n      this.root = null;\n    return ret;\n  }\n\n  if (ret == last) {\n    if (ret._parent._left == node)\n      ret._parent._left = null;\n    else\n      ret._parent._right = null;\n    last = ret._parent;\n    ret._parent = null;\n  } else if (!ret._left && !ret._right) {\n    // we're trying to remove an element without any children and its not the last\n    // move the last under its parent and heap-up\n    if (last._parent._left == last) last._parent._left = null;\n    else last._parent._right = null;\n\n    if (ret._parent._left == ret) ret._parent._left = last;\n    else ret._parent._right = last;\n\n    last._parent = ret._parent;\n\n    ret._parent = null;\n\n    // TODO in this case we shouldn't later also do a down, but it should only visit once\n    this._up(last);\n  } else {\n    this._delete_swap(ret, last);\n  }\n\n  if (ret == this.root)\n    this.root = last;\n\n  this._down(last);\n  this._head();\n\n  return ret;\n};\n\n// TODO this probably isn't the most efficient way to ensure that we're always\n// at the root of the tree, but it works for now\nHeap.prototype._head = function() {\n  if (!this.root)\n    return;\n\n  var tmp = this.root;\n  while (tmp._parent) {\n    tmp = tmp._parent;\n  }\n\n  this.root = tmp;\n};\n\n// TODO is there a more efficient way to store this instead of an array?\nHeap.prototype._last = function() {\n  var path, pos, mod, insert;\n\n  pos = this.length;\n  path = [];\n  while (pos > 1) {\n    mod = pos % 2;\n    pos = Math.floor(pos / 2);\n    path.push(mod);\n  }\n\n  insert = this.root;\n\n  while (path.length > 1) {\n    pos = path.pop();\n    if (pos === 0)\n      insert = insert._left;\n    else\n      insert = insert._right;\n  }\n\n  return insert;\n};\n\nHeap.prototype._swap = function(a, b) {\n  var cleft, cright, tparent;\n\n  cleft = b._left;\n  cright = b._right;\n\n  if (a._parent) {\n    if (a._parent._left == a) a._parent._left = b;\n    else a._parent._right = b;\n  }\n\n  b._parent = a._parent;\n  a._parent = b;\n\n  // This assumes direct descendents\n  if (a._left == b) {\n    b._left = a;\n    b._right = a._right;\n    if (b._right) b._right._parent = b;\n  } else {\n    b._right = a;\n    b._left = a._left;\n    if (b._left) b._left._parent = b;\n  }\n\n  a._left = cleft;\n  a._right = cright;\n\n  if (a._left) a._left._parent = a;\n  if (a._right) a._right._parent = a;\n\n  assert.notEqual(a._parent, a, \"A shouldn't refer to itself\");\n  assert.notEqual(b._parent, b, \"B shouldn't refer to itself\");\n};\n\nHeap.prototype._delete_swap = function(a, b) {\n  if (a._left != b) b._left = a._left;\n  if (a._right != b) b._right = a._right;\n\n  if (b._parent._left == b) b._parent._left = null;\n  else b._parent._right = null;\n\n  if (a._parent) {\n    if (a._parent._left == a) a._parent._left = b;\n    else a._parent._right = b;\n  }\n\n  b._parent = a._parent;\n\n  if (b._left) b._left._parent = b;\n  if (b._right) b._right._parent = b;\n\n  a._parent = null;\n  a._left = null;\n  a._right = null;\n};\n\nHeap.prototype._smallest = function(heap) {\n  var small = heap;\n\n  if (heap._left && heap._key > heap._left._key) {\n    small = heap._left;\n  }\n\n  if (heap._right && small._key > heap._right._key) {\n    small = heap._right;\n  }\n\n  return small;\n};\n\nHeap.prototype._largest = function(heap) {\n  var large = heap;\n\n  if (heap._left && heap._key < heap._left._key) {\n    large = heap._left;\n  }\n\n  if (heap._right && large._key < heap._right._key) {\n    large = heap._right;\n  }\n\n  return large;\n};\n\nHeap.prototype._up = function(node) {\n  if (!node || !node._parent)\n    return;\n\n  var next = this._comparator(node._parent);\n\n  if (next != node._parent) {\n    this._swap(node._parent, node);\n    this._up(node);\n  }\n};\n\nHeap.prototype._down = function(node) {\n  if (!node)\n    return;\n\n  var next = this._comparator(node);\n  if (next != node) {\n    this._swap(node, next);\n    this._down(node);\n  }\n};\n\nvar util = require('util');\n\nHeap.prototype.print = function(stream) {\n  stream.write('digraph {\\n');\n  Heap._print(this.root, stream);\n  stream.write('}\\n');\n};\n\nHeap._print = function(heap, stream) {\n  if (!heap) return;\n\n  if (heap._left) {\n    stream.write(util.format('' + heap._key, '->', heap._left._key, '\\n'));\n    Heap._print(heap._left, stream);\n  }\n\n  if (heap._right) {\n    stream.write(util.format('' + heap._key, '->', heap._right._key, '\\n'));\n    Heap._print(heap._right, stream);\n  }\n};\n\nmodule.exports = Heap;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIC,IAAI,GAAG,SAAAA,CAASC,GAAG,EAAE;EACvB,IAAI,CAACC,MAAM,GAAG,CAAC;EACf,IAAI,CAACC,IAAI,GAAGC,SAAS;EACrB,IAAIH,GAAG,EAAE;IACP,IAAI,CAACI,WAAW,GAAG,IAAI,CAACC,SAAS;EACnC,CAAC,MAAM;IACL,IAAI,CAACD,WAAW,GAAG,IAAI,CAACE,QAAQ;EAClC;AACF,CAAC;AAEDP,IAAI,CAACQ,IAAI,GAAG,UAASC,GAAG,EAAEC,GAAG,EAAE;EAC7BD,GAAG,CAACE,OAAO,GAAG,IAAI;EAClBF,GAAG,CAACG,KAAK,GAAG,IAAI;EAChBH,GAAG,CAACI,MAAM,GAAG,IAAI;EACjBJ,GAAG,CAACK,IAAI,GAAGJ,GAAG;EACd,OAAOD,GAAG;AACZ,CAAC;AAEDT,IAAI,CAACe,SAAS,CAACC,KAAK,GAAG,UAAUC,IAAI,EAAE;EACrC,IAAI,CAACA,IAAI,EAAE,OAAO,CAAC;EAEnB,IAAIC,CAAC,GAAG,CAAC;EAETA,CAAC,IAAI,IAAI,CAACF,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC;EAC3BM,CAAC,IAAI,IAAI,CAACF,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC;EAE5B,OAAOK,CAAC;AACV,CAAC;AAEDlB,IAAI,CAACe,SAAS,CAACI,MAAM,GAAG,UAASV,GAAG,EAAEC,GAAG,EAAE;EACzC,IAAIS,MAAM,EAAEF,IAAI;EAEhB,IAAI,CAACf,MAAM,IAAI,CAAC;EAEhBe,IAAI,GAAGjB,IAAI,CAACQ,IAAI,CAACC,GAAG,EAAEC,GAAG,CAAC;EAE1B,IAAI,CAAC,IAAI,CAACP,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGc,IAAI;EAClB,CAAC,MAAM;IACLE,MAAM,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;IAErBH,IAAI,CAACN,OAAO,GAAGQ,MAAM;IAErB,IAAI,CAACA,MAAM,CAACP,KAAK,EACfO,MAAM,CAACP,KAAK,GAAGK,IAAI,CAAC,KAEpBE,MAAM,CAACN,MAAM,GAAGI,IAAI;IAEtB,IAAI,CAACI,GAAG,CAACJ,IAAI,CAAC;EAChB;EAEA,IAAI,CAACK,KAAK,CAAC,CAAC;EAEZ,OAAOL,IAAI;AACb,CAAC;AAEDjB,IAAI,CAACe,SAAS,CAACQ,GAAG,GAAG,YAAW;EAC9B,IAAIC,GAAG,EAAEC,IAAI;EAEb,IAAI,CAAC,IAAI,CAACtB,IAAI,EACZ,OAAO,IAAI;EAEb,OAAO,IAAI,CAACuB,MAAM,CAAC,IAAI,CAACvB,IAAI,CAAC;AAC/B,CAAC;AAEDH,IAAI,CAACe,SAAS,CAACW,MAAM,GAAG,UAAST,IAAI,EAAE;EACrC,IAAIO,GAAG,EAAEC,IAAI;EAEbD,GAAG,GAAGP,IAAI;EACVQ,IAAI,GAAG,IAAI,CAACL,KAAK,CAAC,CAAC;EAEnB,IAAIK,IAAI,CAACZ,MAAM,EACbY,IAAI,GAAGA,IAAI,CAACZ,MAAM,CAAC,KAEnBY,IAAI,GAAGA,IAAI,CAACb,KAAK;EAEnB,IAAI,CAACV,MAAM,IAAI,CAAC;EAEhB,IAAI,CAACuB,IAAI,EAAE;IACT,IAAID,GAAG,IAAI,IAAI,CAACrB,IAAI,EAClB,IAAI,CAACA,IAAI,GAAG,IAAI;IAClB,OAAOqB,GAAG;EACZ;EAEA,IAAIA,GAAG,IAAIC,IAAI,EAAE;IACf,IAAID,GAAG,CAACb,OAAO,CAACC,KAAK,IAAIK,IAAI,EAC3BO,GAAG,CAACb,OAAO,CAACC,KAAK,GAAG,IAAI,CAAC,KAEzBY,GAAG,CAACb,OAAO,CAACE,MAAM,GAAG,IAAI;IAC3BY,IAAI,GAAGD,GAAG,CAACb,OAAO;IAClBa,GAAG,CAACb,OAAO,GAAG,IAAI;EACpB,CAAC,MAAM,IAAI,CAACa,GAAG,CAACZ,KAAK,IAAI,CAACY,GAAG,CAACX,MAAM,EAAE;IACpC;IACA;IACA,IAAIY,IAAI,CAACd,OAAO,CAACC,KAAK,IAAIa,IAAI,EAAEA,IAAI,CAACd,OAAO,CAACC,KAAK,GAAG,IAAI,CAAC,KACrDa,IAAI,CAACd,OAAO,CAACE,MAAM,GAAG,IAAI;IAE/B,IAAIW,GAAG,CAACb,OAAO,CAACC,KAAK,IAAIY,GAAG,EAAEA,GAAG,CAACb,OAAO,CAACC,KAAK,GAAGa,IAAI,CAAC,KAClDD,GAAG,CAACb,OAAO,CAACE,MAAM,GAAGY,IAAI;IAE9BA,IAAI,CAACd,OAAO,GAAGa,GAAG,CAACb,OAAO;IAE1Ba,GAAG,CAACb,OAAO,GAAG,IAAI;;IAElB;IACA,IAAI,CAACU,GAAG,CAACI,IAAI,CAAC;EAChB,CAAC,MAAM;IACL,IAAI,CAACE,YAAY,CAACH,GAAG,EAAEC,IAAI,CAAC;EAC9B;EAEA,IAAID,GAAG,IAAI,IAAI,CAACrB,IAAI,EAClB,IAAI,CAACA,IAAI,GAAGsB,IAAI;EAElB,IAAI,CAACG,KAAK,CAACH,IAAI,CAAC;EAChB,IAAI,CAACH,KAAK,CAAC,CAAC;EAEZ,OAAOE,GAAG;AACZ,CAAC;;AAED;AACA;AACAxB,IAAI,CAACe,SAAS,CAACO,KAAK,GAAG,YAAW;EAChC,IAAI,CAAC,IAAI,CAACnB,IAAI,EACZ;EAEF,IAAI0B,GAAG,GAAG,IAAI,CAAC1B,IAAI;EACnB,OAAO0B,GAAG,CAAClB,OAAO,EAAE;IAClBkB,GAAG,GAAGA,GAAG,CAAClB,OAAO;EACnB;EAEA,IAAI,CAACR,IAAI,GAAG0B,GAAG;AACjB,CAAC;;AAED;AACA7B,IAAI,CAACe,SAAS,CAACK,KAAK,GAAG,YAAW;EAChC,IAAIU,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEb,MAAM;EAE1BY,GAAG,GAAG,IAAI,CAAC7B,MAAM;EACjB4B,IAAI,GAAG,EAAE;EACT,OAAOC,GAAG,GAAG,CAAC,EAAE;IACdC,GAAG,GAAGD,GAAG,GAAG,CAAC;IACbA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,GAAG,CAAC,CAAC;IACzBD,IAAI,CAACK,IAAI,CAACH,GAAG,CAAC;EAChB;EAEAb,MAAM,GAAG,IAAI,CAAChB,IAAI;EAElB,OAAO2B,IAAI,CAAC5B,MAAM,GAAG,CAAC,EAAE;IACtB6B,GAAG,GAAGD,IAAI,CAACP,GAAG,CAAC,CAAC;IAChB,IAAIQ,GAAG,KAAK,CAAC,EACXZ,MAAM,GAAGA,MAAM,CAACP,KAAK,CAAC,KAEtBO,MAAM,GAAGA,MAAM,CAACN,MAAM;EAC1B;EAEA,OAAOM,MAAM;AACf,CAAC;AAEDnB,IAAI,CAACe,SAAS,CAACqB,KAAK,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EACpC,IAAIC,KAAK,EAAEC,MAAM,EAAEC,OAAO;EAE1BF,KAAK,GAAGD,CAAC,CAAC1B,KAAK;EACf4B,MAAM,GAAGF,CAAC,CAACzB,MAAM;EAEjB,IAAIwB,CAAC,CAAC1B,OAAO,EAAE;IACb,IAAI0B,CAAC,CAAC1B,OAAO,CAACC,KAAK,IAAIyB,CAAC,EAAEA,CAAC,CAAC1B,OAAO,CAACC,KAAK,GAAG0B,CAAC,CAAC,KACzCD,CAAC,CAAC1B,OAAO,CAACE,MAAM,GAAGyB,CAAC;EAC3B;EAEAA,CAAC,CAAC3B,OAAO,GAAG0B,CAAC,CAAC1B,OAAO;EACrB0B,CAAC,CAAC1B,OAAO,GAAG2B,CAAC;;EAEb;EACA,IAAID,CAAC,CAACzB,KAAK,IAAI0B,CAAC,EAAE;IAChBA,CAAC,CAAC1B,KAAK,GAAGyB,CAAC;IACXC,CAAC,CAACzB,MAAM,GAAGwB,CAAC,CAACxB,MAAM;IACnB,IAAIyB,CAAC,CAACzB,MAAM,EAAEyB,CAAC,CAACzB,MAAM,CAACF,OAAO,GAAG2B,CAAC;EACpC,CAAC,MAAM;IACLA,CAAC,CAACzB,MAAM,GAAGwB,CAAC;IACZC,CAAC,CAAC1B,KAAK,GAAGyB,CAAC,CAACzB,KAAK;IACjB,IAAI0B,CAAC,CAAC1B,KAAK,EAAE0B,CAAC,CAAC1B,KAAK,CAACD,OAAO,GAAG2B,CAAC;EAClC;EAEAD,CAAC,CAACzB,KAAK,GAAG2B,KAAK;EACfF,CAAC,CAACxB,MAAM,GAAG2B,MAAM;EAEjB,IAAIH,CAAC,CAACzB,KAAK,EAAEyB,CAAC,CAACzB,KAAK,CAACD,OAAO,GAAG0B,CAAC;EAChC,IAAIA,CAAC,CAACxB,MAAM,EAAEwB,CAAC,CAACxB,MAAM,CAACF,OAAO,GAAG0B,CAAC;EAElCvC,MAAM,CAAC4C,QAAQ,CAACL,CAAC,CAAC1B,OAAO,EAAE0B,CAAC,EAAE,6BAA6B,CAAC;EAC5DvC,MAAM,CAAC4C,QAAQ,CAACJ,CAAC,CAAC3B,OAAO,EAAE2B,CAAC,EAAE,6BAA6B,CAAC;AAC9D,CAAC;AAEDtC,IAAI,CAACe,SAAS,CAACY,YAAY,GAAG,UAASU,CAAC,EAAEC,CAAC,EAAE;EAC3C,IAAID,CAAC,CAACzB,KAAK,IAAI0B,CAAC,EAAEA,CAAC,CAAC1B,KAAK,GAAGyB,CAAC,CAACzB,KAAK;EACnC,IAAIyB,CAAC,CAACxB,MAAM,IAAIyB,CAAC,EAAEA,CAAC,CAACzB,MAAM,GAAGwB,CAAC,CAACxB,MAAM;EAEtC,IAAIyB,CAAC,CAAC3B,OAAO,CAACC,KAAK,IAAI0B,CAAC,EAAEA,CAAC,CAAC3B,OAAO,CAACC,KAAK,GAAG,IAAI,CAAC,KAC5C0B,CAAC,CAAC3B,OAAO,CAACE,MAAM,GAAG,IAAI;EAE5B,IAAIwB,CAAC,CAAC1B,OAAO,EAAE;IACb,IAAI0B,CAAC,CAAC1B,OAAO,CAACC,KAAK,IAAIyB,CAAC,EAAEA,CAAC,CAAC1B,OAAO,CAACC,KAAK,GAAG0B,CAAC,CAAC,KACzCD,CAAC,CAAC1B,OAAO,CAACE,MAAM,GAAGyB,CAAC;EAC3B;EAEAA,CAAC,CAAC3B,OAAO,GAAG0B,CAAC,CAAC1B,OAAO;EAErB,IAAI2B,CAAC,CAAC1B,KAAK,EAAE0B,CAAC,CAAC1B,KAAK,CAACD,OAAO,GAAG2B,CAAC;EAChC,IAAIA,CAAC,CAACzB,MAAM,EAAEyB,CAAC,CAACzB,MAAM,CAACF,OAAO,GAAG2B,CAAC;EAElCD,CAAC,CAAC1B,OAAO,GAAG,IAAI;EAChB0B,CAAC,CAACzB,KAAK,GAAG,IAAI;EACdyB,CAAC,CAACxB,MAAM,GAAG,IAAI;AACjB,CAAC;AAEDb,IAAI,CAACe,SAAS,CAACT,SAAS,GAAG,UAASqC,IAAI,EAAE;EACxC,IAAIC,KAAK,GAAGD,IAAI;EAEhB,IAAIA,IAAI,CAAC/B,KAAK,IAAI+B,IAAI,CAAC7B,IAAI,GAAG6B,IAAI,CAAC/B,KAAK,CAACE,IAAI,EAAE;IAC7C8B,KAAK,GAAGD,IAAI,CAAC/B,KAAK;EACpB;EAEA,IAAI+B,IAAI,CAAC9B,MAAM,IAAI+B,KAAK,CAAC9B,IAAI,GAAG6B,IAAI,CAAC9B,MAAM,CAACC,IAAI,EAAE;IAChD8B,KAAK,GAAGD,IAAI,CAAC9B,MAAM;EACrB;EAEA,OAAO+B,KAAK;AACd,CAAC;AAED5C,IAAI,CAACe,SAAS,CAACR,QAAQ,GAAG,UAASoC,IAAI,EAAE;EACvC,IAAIE,KAAK,GAAGF,IAAI;EAEhB,IAAIA,IAAI,CAAC/B,KAAK,IAAI+B,IAAI,CAAC7B,IAAI,GAAG6B,IAAI,CAAC/B,KAAK,CAACE,IAAI,EAAE;IAC7C+B,KAAK,GAAGF,IAAI,CAAC/B,KAAK;EACpB;EAEA,IAAI+B,IAAI,CAAC9B,MAAM,IAAIgC,KAAK,CAAC/B,IAAI,GAAG6B,IAAI,CAAC9B,MAAM,CAACC,IAAI,EAAE;IAChD+B,KAAK,GAAGF,IAAI,CAAC9B,MAAM;EACrB;EAEA,OAAOgC,KAAK;AACd,CAAC;AAED7C,IAAI,CAACe,SAAS,CAACM,GAAG,GAAG,UAASJ,IAAI,EAAE;EAClC,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACN,OAAO,EACxB;EAEF,IAAImC,IAAI,GAAG,IAAI,CAACzC,WAAW,CAACY,IAAI,CAACN,OAAO,CAAC;EAEzC,IAAImC,IAAI,IAAI7B,IAAI,CAACN,OAAO,EAAE;IACxB,IAAI,CAACyB,KAAK,CAACnB,IAAI,CAACN,OAAO,EAAEM,IAAI,CAAC;IAC9B,IAAI,CAACI,GAAG,CAACJ,IAAI,CAAC;EAChB;AACF,CAAC;AAEDjB,IAAI,CAACe,SAAS,CAACa,KAAK,GAAG,UAASX,IAAI,EAAE;EACpC,IAAI,CAACA,IAAI,EACP;EAEF,IAAI6B,IAAI,GAAG,IAAI,CAACzC,WAAW,CAACY,IAAI,CAAC;EACjC,IAAI6B,IAAI,IAAI7B,IAAI,EAAE;IAChB,IAAI,CAACmB,KAAK,CAACnB,IAAI,EAAE6B,IAAI,CAAC;IACtB,IAAI,CAAClB,KAAK,CAACX,IAAI,CAAC;EAClB;AACF,CAAC;AAED,IAAI8B,IAAI,GAAGhD,OAAO,CAAC,MAAM,CAAC;AAE1BC,IAAI,CAACe,SAAS,CAACiC,KAAK,GAAG,UAASC,MAAM,EAAE;EACtCA,MAAM,CAACC,KAAK,CAAC,aAAa,CAAC;EAC3BlD,IAAI,CAACmD,MAAM,CAAC,IAAI,CAAChD,IAAI,EAAE8C,MAAM,CAAC;EAC9BA,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;AACrB,CAAC;AAEDlD,IAAI,CAACmD,MAAM,GAAG,UAASR,IAAI,EAAEM,MAAM,EAAE;EACnC,IAAI,CAACN,IAAI,EAAE;EAEX,IAAIA,IAAI,CAAC/B,KAAK,EAAE;IACdqC,MAAM,CAACC,KAAK,CAACH,IAAI,CAACK,MAAM,CAAC,EAAE,GAAGT,IAAI,CAAC7B,IAAI,EAAE,IAAI,EAAE6B,IAAI,CAAC/B,KAAK,CAACE,IAAI,EAAE,IAAI,CAAC,CAAC;IACtEd,IAAI,CAACmD,MAAM,CAACR,IAAI,CAAC/B,KAAK,EAAEqC,MAAM,CAAC;EACjC;EAEA,IAAIN,IAAI,CAAC9B,MAAM,EAAE;IACfoC,MAAM,CAACC,KAAK,CAACH,IAAI,CAACK,MAAM,CAAC,EAAE,GAAGT,IAAI,CAAC7B,IAAI,EAAE,IAAI,EAAE6B,IAAI,CAAC9B,MAAM,CAACC,IAAI,EAAE,IAAI,CAAC,CAAC;IACvEd,IAAI,CAACmD,MAAM,CAACR,IAAI,CAAC9B,MAAM,EAAEoC,MAAM,CAAC;EAClC;AACF,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGtD,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}