{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst {\n  Canvas\n} = require(\"../../utils\");\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  constructor(...args) {\n    super(...args);\n    this._currentRequestState = \"unavailable\";\n  }\n  _attrModified(name, value, oldVal) {\n    // TODO: handle crossorigin\n    if (name === \"src\" || (name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal) {\n      this._updateTheImageData();\n    }\n    super._attrModified(name, value, oldVal);\n  }\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) : this.naturalHeight;\n  }\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) : this.naturalWidth;\n  }\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n  get complete() {\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    return srcAttributeValue === null || srcAttributeValue === \"\" || this._currentRequestState === \"broken\" || this._currentRequestState === \"completely available\";\n  }\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n  _updateTheImageData() {\n    const document = this._ownerDocument;\n    if (!document._defaultView) {\n      return;\n    }\n    if (!Canvas) {\n      return;\n    }\n    if (!this._image) {\n      this._image = new Canvas.Image();\n    }\n    this._currentSrc = null;\n    this._currentRequestState = \"unavailable\";\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    let urlString = null;\n    if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n      const urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n      if (urlRecord === null) {\n        return;\n      }\n      urlString = serializeURL(urlRecord);\n    }\n    if (urlString !== null) {\n      const resourceLoader = document._resourceLoader;\n      let request;\n      const onLoadImage = data => {\n        const {\n          response\n        } = request;\n        if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n          throw new Error(\"Status code: \" + response.statusCode);\n        }\n        let error = null;\n        this._image.onerror = function (err) {\n          error = err;\n        };\n        this._image.src = data;\n        if (error) {\n          throw new Error(error);\n        }\n        this._currentSrc = srcAttributeValue;\n        this._currentRequestState = \"completely available\";\n      };\n      request = resourceLoader.fetch(urlString, {\n        element: this,\n        onLoad: onLoadImage,\n        onError: () => {\n          this._currentRequestState = \"broken\";\n        }\n      });\n    } else {\n      this._image.src = \"\";\n    }\n  }\n}\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};","map":{"version":3,"names":["conversions","require","serializeURL","HTMLElementImpl","implementation","Canvas","parseURLToResultingURLRecord","HTMLImageElementImpl","constructor","args","_currentRequestState","_attrModified","name","value","oldVal","_updateTheImageData","_accept","height","hasAttributeNS","getAttributeNS","naturalHeight","V","setAttributeNS","String","width","naturalWidth","_image","complete","srcAttributeValue","currentSrc","_currentSrc","document","_ownerDocument","_defaultView","Image","urlString","urlRecord","resourceLoader","_resourceLoader","request","onLoadImage","data","response","statusCode","undefined","Error","error","onerror","err","src","fetch","element","onLoad","onError","module","exports"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/jsdom/lib/jsdom/living/nodes/HTMLImageElement-impl.js"],"sourcesContent":["\"use strict\";\nconst conversions = require(\"webidl-conversions\");\nconst { serializeURL } = require(\"whatwg-url\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { Canvas } = require(\"../../utils\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  constructor(...args) {\n    super(...args);\n    this._currentRequestState = \"unavailable\";\n  }\n\n  _attrModified(name, value, oldVal) {\n    // TODO: handle crossorigin\n    if (name === \"src\" || ((name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal)) {\n      this._updateTheImageData();\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) :\n           this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) :\n           this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    return srcAttributeValue === null ||\n      srcAttributeValue === \"\" ||\n      this._currentRequestState === \"broken\" ||\n      this._currentRequestState === \"completely available\";\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n  _updateTheImageData() {\n    const document = this._ownerDocument;\n\n    if (!document._defaultView) {\n      return;\n    }\n\n    if (!Canvas) {\n      return;\n    }\n\n    if (!this._image) {\n      this._image = new Canvas.Image();\n    }\n    this._currentSrc = null;\n    this._currentRequestState = \"unavailable\";\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    let urlString = null;\n    if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n      const urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n      if (urlRecord === null) {\n        return;\n      }\n      urlString = serializeURL(urlRecord);\n    }\n    if (urlString !== null) {\n      const resourceLoader = document._resourceLoader;\n      let request;\n\n      const onLoadImage = data => {\n        const { response } = request;\n\n        if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n          throw new Error(\"Status code: \" + response.statusCode);\n        }\n        let error = null;\n        this._image.onerror = function (err) {\n          error = err;\n        };\n        this._image.src = data;\n        if (error) {\n          throw new Error(error);\n        }\n        this._currentSrc = srcAttributeValue;\n        this._currentRequestState = \"completely available\";\n      };\n\n      request = resourceLoader.fetch(urlString, {\n        element: this,\n        onLoad: onLoadImage,\n        onError: () => {\n          this._currentRequestState = \"broken\";\n        }\n      });\n    } else {\n      this._image.src = \"\";\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}