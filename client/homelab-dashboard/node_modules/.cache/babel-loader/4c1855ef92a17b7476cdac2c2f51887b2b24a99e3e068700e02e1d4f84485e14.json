{"ast":null,"code":"var _jsxFileName = \"D:\\\\benki\\\\Programming\\\\GitHub\\\\homelab-dashboard\\\\client\\\\homelab-dashboard\\\\src\\\\ResourceUsageBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Resource from \"./Resource\";\nimport * as systemConnector from \"./systemConnector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResourceUsageBar() {\n  _s();\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState({});\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState({});\n  const [freeDiskSpace, setFreeDiskSpace] = useState({});\n  const [totalDiskSpace, setTotalDiskSpace] = useState({});\n  useEffect(() => {\n    // Function to be executed every second\n    const updateSystemInfo = () => {\n      console.log(cpuUtilizationPercent.responseText);\n      console.log(memUtilizationPercent.responseText);\n      console.log(freeDiskSpace.responseText);\n      console.log(totalDiskSpace.responseText);\n      console.log(\"\");\n      systemConnector.getCpuUtilization((error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          console.log();\n          setCpuUtilizationPercent(result);\n        }\n      });\n      setMemUtilizationPercent(systemConnector.getMemoryUtilization());\n      setFreeDiskSpace(systemConnector.getFreeDiskSpace());\n      setTotalDiskSpace(systemConnector.getTotalDiskSpace());\n    };\n\n    // Set up the interval\n    const intervalId = setInterval(updateSystemInfo, 5000); // 1000 milliseconds = 1 second\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures that the effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"resource-usage-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${cpuUtilizationPercent.responseText}%`,\n      resourceName: \"CPU\",\n      percent: cpuUtilizationPercent.responseText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${memUtilizationPercent.responseText}%`,\n      resourceName: \"MEM\",\n      percent: memUtilizationPercent.responseText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Resource, {\n      imgPath: \"#\",\n      usageMetric: `${systemConnector.formatBytes(freeDiskSpace.responseText)}`,\n      resourceName: \"Free\",\n      percent: (Number(freeDiskSpace.responseText) / Number(totalDiskSpace.responseText) * 100).toFixed(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ResourceUsageBar, \"8aGJiu56hYDpDCed0VgKBl3H/dk=\");\n_c = ResourceUsageBar;\nexport default ResourceUsageBar;\nvar _c;\n$RefreshReg$(_c, \"ResourceUsageBar\");","map":{"version":3,"names":["React","useState","useEffect","Resource","systemConnector","jsxDEV","_jsxDEV","ResourceUsageBar","_s","cpuUtilizationPercent","setCpuUtilizationPercent","memUtilizationPercent","setMemUtilizationPercent","freeDiskSpace","setFreeDiskSpace","totalDiskSpace","setTotalDiskSpace","updateSystemInfo","console","log","responseText","getCpuUtilization","error","result","getMemoryUtilization","getFreeDiskSpace","getTotalDiskSpace","intervalId","setInterval","clearInterval","id","children","imgPath","usageMetric","resourceName","percent","fileName","_jsxFileName","lineNumber","columnNumber","formatBytes","Number","toFixed","_c","$RefreshReg$"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/src/ResourceUsageBar.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport Resource from \"./Resource\";\r\nimport * as systemConnector from \"./systemConnector\";\r\n\r\nfunction ResourceUsageBar() {\r\n  const [cpuUtilizationPercent, setCpuUtilizationPercent] = useState({});\r\n  const [memUtilizationPercent, setMemUtilizationPercent] = useState({});\r\n  const [freeDiskSpace, setFreeDiskSpace] = useState({});\r\n  const [totalDiskSpace, setTotalDiskSpace] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Function to be executed every second\r\n    const updateSystemInfo = () => {\r\n      console.log(cpuUtilizationPercent.responseText);\r\n      console.log(memUtilizationPercent.responseText);\r\n      console.log(freeDiskSpace.responseText);\r\n      console.log(totalDiskSpace.responseText);\r\n      console.log(\"\");\r\n      \r\n      systemConnector.getCpuUtilization((error, result) => {\r\n        if(error) {\r\n          console.error(error);\r\n        }\r\n        else {\r\n          console.log()\r\n          setCpuUtilizationPercent(result);\r\n        }\r\n      });\r\n\r\n\r\n\r\n      setMemUtilizationPercent(systemConnector.getMemoryUtilization());\r\n      setFreeDiskSpace(systemConnector.getFreeDiskSpace());\r\n      setTotalDiskSpace(systemConnector.getTotalDiskSpace());\r\n    };\r\n\r\n    // Set up the interval\r\n    const intervalId = setInterval(updateSystemInfo, 5000); // 1000 milliseconds = 1 second\r\n\r\n    // Clean up the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, []); // Empty dependency array ensures that the effect runs only once\r\n  \r\n  return (\r\n    <div id=\"resource-usage-bar\">\r\n        <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${cpuUtilizationPercent.responseText}%`}\r\n        resourceName={\"CPU\"}\r\n        percent={cpuUtilizationPercent.responseText}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${memUtilizationPercent.responseText}%`}\r\n        resourceName={\"MEM\"}\r\n        percent={memUtilizationPercent.responseText}\r\n      />\r\n\r\n      <Resource \r\n        imgPath={\"#\"}\r\n        usageMetric={`${systemConnector.formatBytes(freeDiskSpace.responseText)}`}\r\n        resourceName={\"Free\"}\r\n        percent={(Number(freeDiskSpace.responseText) / Number(totalDiskSpace.responseText) * 100).toFixed(2)}\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ResourceUsageBar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}