{"ast":null,"code":"// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Test displaying DNS records\n\nvar util = require('util');\nvar parse = require('./parse');\nvar encode = require('./encode');\nvar constants = require('./constants');\nmodule.exports = DNSMessage;\nvar SECTIONS = ['question', 'answer', 'authority', 'additional'];\n\n// A DNS message.  This is an easy-to-understand object representation of\n// standard DNS queries and responses.\n//\n// Attributes:\n// * id                  - a number representing the unique query ID\n// * type                - \"request\" or \"response\"\n// * response            - Number (server response code)\n// * opcode              - \"query\", \"iquery\", \"status\", \"unassigned\", \"notify\", \"update\"\n// * authoritative       - Boolean\n// * truncated           - Boolean\n// * recursion_desired   - Boolean\n// * recursion_available - Boolean\n// * authenticated       - Boolean\n// * checking_disabled   - Boolean\n//\n// Optional attributes:\n// * question (optional) - Array of the question section\n// * answer (optional) - Array of the answer section\n// * authority (optional) - Array of the authority section\n// * additional (optional) - Array of the additional section\n//\n// Methods:\n// * toString() - return a human-readable representation of this message\n// * toJSON() - Return a JSON-friendly represenation of this message\n// * toBinary() - Return a buffer of the encoded message\nfunction DNSMessage(body) {\n  var self = this;\n  this.id = null;\n  this.type = null;\n  this.responseCode = null;\n  this.opcode = null;\n  this.authoritative = null;\n  this.truncated = null;\n  this.recursion_desired = null;\n  this.recursion_available = null;\n  this.authenticated = null;\n  this.checking_disabled = null;\n  if (Buffer.isBuffer(body)) this.parse(body);else if (typeof body != 'object') throw new Error('Must provide a buffer or object argument with message contents');else {\n    Object.keys(body).forEach(function (key) {\n      self[key] = body[key];\n    });\n    SECTIONS.forEach(function (section) {\n      if (self[section]) self[section].forEach(function (record, i) {\n        self[section][i] = new DNSRecord(record);\n      });\n    });\n  }\n\n  // EDNS processing. For now, just remove those records.\n  SECTIONS.forEach(function (section) {\n    if (self[section]) {\n      self[section] = self[section].filter(function (record) {\n        return !record.edns;\n      });\n      if (self[section].length == 0) delete self[section];\n    }\n  });\n}\nDNSMessage.prototype.parse = function (body) {\n  var self = this;\n  self.id = parse.id(body);\n  var qr = parse.qr(body);\n  self.type = qr == 0 ? 'request' : 'response';\n  self.responseCode = parse.rcode(body);\n  var opcode_names = ['query', 'iquery', 'status', null, 'notify', 'update'];\n  var opcode = parse.opcode(body);\n  self.opcode = opcode_names[opcode] || null;\n  self.authoritative = !!parse.aa(body);\n  self.truncated = !!parse.tc(body);\n  self.recursion_desired = !!parse.rd(body);\n  self.recursion_available = !!parse.ra(body);\n  self.authenticated = !!parse.ad(body);\n  self.checking_disabled = !!parse.cd(body);\n  var sections_cache = parse.sections(body);\n  SECTIONS.forEach(function (section) {\n    var count = parse.record_count(body, section);\n    if (count) {\n      self[section] = [];\n      for (var i = 0; i < count; i++) self[section].push(new DNSRecord(body, section, i, sections_cache));\n    }\n  });\n};\nDNSMessage.prototype.toBinary = function () {\n  // The encoder is picky, so make sure it gets a valid message.\n  var msg = JSON.parse(JSON.stringify(this));\n  SECTIONS.forEach(function (section) {\n    if (section == 'question') return;\n    msg[section] = msg[section] || [];\n    msg[section].forEach(function (record) {\n      if (record.class != 'IN') return;\n\n      // Make sure records promising data have data.\n      if (record.class == 'IN' && record.type == 'A') record.data = record.data || '0.0.0.0';\n\n      // Convert SOA email addresses back to the dotted notation.\n      if (record.class == 'IN' && record.type == 'SOA') record.data.rname = record.data.rname.replace(/@/g, '.');\n\n      // Normalize TXT records.\n      if (record.type == 'TXT' && typeof record.data == 'string') record.data = [record.data];\n    });\n  });\n  var state = new encode.State();\n  state.message(msg);\n  return state.toBinary();\n};\nDNSMessage.prototype.toString = function () {\n  var self = this;\n  var info = [util.format('ID                 : %d', self.id), util.format(\"Type               : %s\", self.type), util.format(\"Opcode             : %s\", self.opcode), util.format(\"Authoritative      : %s\", self.authoritative), util.format(\"Truncated          : %s\", self.truncated), util.format(\"Recursion Desired  : %s\", self.recursion_desired), util.format(\"Recursion Available: %s\", self.recursion_available), util.format(\"Response Code      : %d\", self.responseCode)];\n  SECTIONS.forEach(function (section) {\n    if (self[section]) {\n      info.push(util.format(';; %s SECTION:', section.toUpperCase()));\n      self[section].forEach(function (record) {\n        info.push(record.toString());\n      });\n    }\n  });\n  return info.join('\\n');\n};\n\n// An individual record from a DNS message\n//\n// Attributes:\n// * name  - Host name\n// * type  - Query type ('A', 'NS', 'CNAME', etc. or 'Unknown')\n// * class - Network class ('IN', 'None' 'Unknown')\n// * ttl   - Time to live for the data in the record\n// * data  - The record data value, or null if not applicable\nfunction DNSRecord(body, section_name, record_num, sections_cache) {\n  var self = this;\n  this.name = null;\n  this.type = null;\n  this.class = null;\n\n  // Leave these undefined for more consice and clear JSON serialization.\n  //this.ttl  = null\n  //this.data = null\n\n  if (Buffer.isBuffer(body)) this.parse(body, section_name, record_num, sections_cache || body);else if (typeof body != 'object') throw new Error('Must provide a buffer or object argument with message contents');else Object.keys(body).forEach(function (key) {\n    self[key] = body[key];\n  });\n}\nDNSRecord.prototype.parse = function (body, section_name, record_num, sections) {\n  var self = this;\n  self.name = parse.record_name(sections, section_name, record_num);\n  var type = parse.record_type(sections, section_name, record_num);\n  self.type = constants.type_to_label(type);\n  if (!self.type) throw new Error('Record ' + record_num + ' in section \"' + section_name + '\" has unknown type: ' + type);\n  if (section_name != 'additional' || self.type != 'OPT' || self.name != '') {\n    // Normal record\n    var clas = parse.record_class(sections, section_name, record_num);\n    self.class = constants.class_to_label(clas);\n    if (!self.class) throw new Error('Record ' + record_num + ' in section \"' + section_name + '\" has unknown class: ' + type);\n    if (section_name == 'question') return;else self.ttl = parse.record_ttl(sections, section_name, record_num);\n  } else {\n    // EDNS record\n    self.edns = true;\n    delete self.name;\n    delete self.class;\n    //self.edns = parse.record_edns(sections, section_name, record_num)\n  }\n  var rdata = parse.record_data(sections, section_name, record_num);\n  switch (self.kind()) {\n    case 'IN A':\n      if (rdata.length != 4) throw new Error('Bad IN A data: ' + JSON.stringify(self));\n      self.data = inet_ntoa(rdata);\n      break;\n    case 'IN AAAA':\n      if (rdata.length != 16) throw new Error('Bad IN AAAA data: ' + JSON.stringify(self));\n      self.data = inet_ntoa6(rdata);\n      break;\n    case 'IN NS':\n    case 'IN CNAME':\n    case 'IN PTR':\n      self.data = parse.uncompress(body, rdata);\n      break;\n    case 'IN TXT':\n      self.data = parse.txt(body, rdata);\n      if (self.data.length === 0) self.data = '';else if (self.data.length === 1) self.data = self.data[0];\n      break;\n    case 'IN MX':\n      self.data = parse.mx(body, rdata);\n      break;\n    case 'IN SRV':\n      self.data = parse.srv(body, rdata);\n      break;\n    case 'IN SOA':\n      self.data = parse.soa(body, rdata);\n      self.data.rname = self.data.rname.replace(/\\./, '@');\n      break;\n    case 'IN DS':\n      self.data = {\n        'key_tag': rdata[0] << 8 | rdata[1],\n        'algorithm': rdata[2],\n        'digest_type': rdata[3],\n        'digest': rdata.slice(4).toJSON() // Convert to a list of numbers.\n      };\n      break;\n    case 'NONE A':\n      self.data = [];\n      break;\n    case 'EDNS':\n      self.data = rdata;\n      break;\n    default:\n      throw new Error('Unknown record ' + self.kind() + ': ' + JSON.stringify(self));\n  }\n};\nDNSRecord.prototype.kind = function () {\n  return this.edns ? 'EDNS' : this.class + ' ' + this.type;\n};\nDNSRecord.prototype.toString = function () {\n  var self = this;\n  return [width(23, self.name), width(7, self.ttl || ''), width(7, self.class), width(7, self.type), self.type == 'MX' && self.data ? width(3, self.data[0]) + ' ' + self.data[1] : Buffer.isBuffer(self.data) ? self.data.toString('hex') : self.data || ''].join(' ');\n};\n\n//\n// Utilities\n//\n\nfunction width(str_len, str) {\n  str = '' + str;\n  do {\n    var needed = str_len - str.length;\n    if (needed > 0) str = ' ' + str;\n  } while (needed > 0);\n  return str;\n}\nfunction inet_ntoa(buf) {\n  return buf[0] + '.' + buf[1] + '.' + buf[2] + '.' + buf[3];\n}\nfunction inet_ntoa6(buf) {\n  var result = [];\n  for (var i = 0; i < 16; i += 2) result.push(buf.slice(i, i + 2).toString('hex'));\n  return result.join(':');\n}","map":{"version":3,"names":["util","require","parse","encode","constants","module","exports","DNSMessage","SECTIONS","body","self","id","type","responseCode","opcode","authoritative","truncated","recursion_desired","recursion_available","authenticated","checking_disabled","Buffer","isBuffer","Error","Object","keys","forEach","key","section","record","i","DNSRecord","filter","edns","length","prototype","qr","rcode","opcode_names","aa","tc","rd","ra","ad","cd","sections_cache","sections","count","record_count","push","toBinary","msg","JSON","stringify","class","data","rname","replace","state","State","message","toString","info","format","toUpperCase","join","section_name","record_num","name","record_name","record_type","type_to_label","clas","record_class","class_to_label","ttl","record_ttl","rdata","record_data","kind","inet_ntoa","inet_ntoa6","uncompress","txt","mx","srv","soa","slice","toJSON","width","str_len","str","needed","buf","result"],"sources":["D:/benki/Programming/GitHub/homelab-dashboard/client/homelab-dashboard/node_modules/hbo-dnsd/message.js"],"sourcesContent":["// Copyright 2012 Iris Couch, all rights reserved.\n//\n// Test displaying DNS records\n\nvar util = require('util')\n\nvar parse = require('./parse')\nvar encode = require('./encode')\nvar constants = require('./constants')\n\nmodule.exports = DNSMessage\n\nvar SECTIONS = ['question', 'answer', 'authority', 'additional']\n\n// A DNS message.  This is an easy-to-understand object representation of\n// standard DNS queries and responses.\n//\n// Attributes:\n// * id                  - a number representing the unique query ID\n// * type                - \"request\" or \"response\"\n// * response            - Number (server response code)\n// * opcode              - \"query\", \"iquery\", \"status\", \"unassigned\", \"notify\", \"update\"\n// * authoritative       - Boolean\n// * truncated           - Boolean\n// * recursion_desired   - Boolean\n// * recursion_available - Boolean\n// * authenticated       - Boolean\n// * checking_disabled   - Boolean\n//\n// Optional attributes:\n// * question (optional) - Array of the question section\n// * answer (optional) - Array of the answer section\n// * authority (optional) - Array of the authority section\n// * additional (optional) - Array of the additional section\n//\n// Methods:\n// * toString() - return a human-readable representation of this message\n// * toJSON() - Return a JSON-friendly represenation of this message\n// * toBinary() - Return a buffer of the encoded message\nfunction DNSMessage (body) {\n  var self = this\n\n  this.id = null\n  this.type                = null\n  this.responseCode        = null\n  this.opcode              = null\n  this.authoritative       = null\n  this.truncated           = null\n  this.recursion_desired   = null\n  this.recursion_available = null\n  this.authenticated       = null\n  this.checking_disabled   = null\n\n  if(Buffer.isBuffer(body))\n    this.parse(body)\n  else if(typeof body != 'object')\n    throw new Error('Must provide a buffer or object argument with message contents')\n  else {\n    Object.keys(body).forEach(function(key) { self[key] = body[key] })\n    SECTIONS.forEach(function(section) {\n      if(self[section])\n        self[section].forEach(function(record, i) {\n          self[section][i] = new DNSRecord(record)\n        })\n    })\n  }\n\n  // EDNS processing. For now, just remove those records.\n  SECTIONS.forEach(function(section) {\n    if(self[section]) {\n      self[section] = self[section].filter(function(record) { return ! record.edns })\n      if(self[section].length == 0)\n        delete self[section]\n    }\n  })\n}\n\nDNSMessage.prototype.parse = function(body) {\n  var self = this\n\n  self.id = parse.id(body)\n\n  var qr = parse.qr(body)\n  self.type = (qr == 0) ? 'request' : 'response'\n\n  self.responseCode = parse.rcode(body)\n\n  var opcode_names = ['query', 'iquery', 'status', null, 'notify', 'update']\n  var opcode = parse.opcode(body)\n  self.opcode = opcode_names[opcode] || null\n\n  self.authoritative       = !! parse.aa(body)\n  self.truncated           = !! parse.tc(body)\n  self.recursion_desired   = !! parse.rd(body)\n  self.recursion_available = !! parse.ra(body)\n  self.authenticated       = !! parse.ad(body)\n  self.checking_disabled   = !! parse.cd(body)\n\n  var sections_cache = parse.sections(body)\n\n  SECTIONS.forEach(function(section) {\n    var count = parse.record_count(body, section)\n    if(count) {\n      self[section] = []\n      for(var i = 0; i < count; i++)\n        self[section].push(new DNSRecord(body, section, i, sections_cache))\n    }\n  })\n}\n\nDNSMessage.prototype.toBinary = function() {\n  // The encoder is picky, so make sure it gets a valid message.\n  var msg = JSON.parse(JSON.stringify(this))\n\n  SECTIONS.forEach(function(section) {\n    if(section == 'question')\n      return\n\n    msg[section] = msg[section] || []\n    msg[section].forEach(function(record) {\n      if(record.class != 'IN')\n        return\n\n      // Make sure records promising data have data.\n      if(record.class == 'IN' && record.type == 'A')\n        record.data = record.data || '0.0.0.0'\n\n      // Convert SOA email addresses back to the dotted notation.\n      if(record.class == 'IN' && record.type == 'SOA')\n        record.data.rname = record.data.rname.replace(/@/g, '.')\n\n      // Normalize TXT records.\n      if(record.type == 'TXT' && typeof record.data == 'string')\n        record.data = [record.data]\n    })\n  })\n\n  var state = new encode.State\n  state.message(msg)\n  return state.toBinary()\n}\n\nDNSMessage.prototype.toString = function() {\n  var self = this\n\n  var info = [ util.format('ID                 : %d', self.id)\n             , util.format(\"Type               : %s\", self.type)\n             , util.format(\"Opcode             : %s\", self.opcode)\n             , util.format(\"Authoritative      : %s\", self.authoritative)\n             , util.format(\"Truncated          : %s\", self.truncated)\n             , util.format(\"Recursion Desired  : %s\", self.recursion_desired)\n             , util.format(\"Recursion Available: %s\", self.recursion_available)\n             , util.format(\"Response Code      : %d\", self.responseCode)\n             ]\n\n  SECTIONS.forEach(function(section) {\n    if(self[section]) {\n      info.push(util.format(';; %s SECTION:', section.toUpperCase()))\n      self[section].forEach(function(record) {\n        info.push(record.toString())\n      })\n    }\n  })\n\n  return info.join('\\n')\n}\n\n\n// An individual record from a DNS message\n//\n// Attributes:\n// * name  - Host name\n// * type  - Query type ('A', 'NS', 'CNAME', etc. or 'Unknown')\n// * class - Network class ('IN', 'None' 'Unknown')\n// * ttl   - Time to live for the data in the record\n// * data  - The record data value, or null if not applicable\nfunction DNSRecord (body, section_name, record_num, sections_cache) {\n  var self = this\n\n  this.name = null\n  this.type = null\n  this.class = null\n\n  // Leave these undefined for more consice and clear JSON serialization.\n  //this.ttl  = null\n  //this.data = null\n\n  if(Buffer.isBuffer(body))\n    this.parse(body, section_name, record_num, sections_cache || body)\n  else if(typeof body != 'object')\n    throw new Error('Must provide a buffer or object argument with message contents')\n  else\n    Object.keys(body).forEach(function(key) { self[key] = body[key] })\n}\n\nDNSRecord.prototype.parse = function(body, section_name, record_num, sections) {\n  var self = this\n\n  self.name = parse.record_name(sections, section_name, record_num)\n\n  var type = parse.record_type(sections, section_name, record_num)\n  self.type = constants.type_to_label(type)\n  if(! self.type)\n    throw new Error('Record '+record_num+' in section \"'+section_name+'\" has unknown type: ' + type)\n\n  if(section_name != 'additional' || self.type != 'OPT' || self.name != '') {\n    // Normal record\n    var clas = parse.record_class(sections, section_name, record_num)\n    self.class = constants.class_to_label(clas)\n    if(! self.class)\n      throw new Error('Record '+record_num+' in section \"'+section_name+'\" has unknown class: ' + type)\n\n    if(section_name == 'question')\n      return\n    else\n      self.ttl  = parse.record_ttl(sections, section_name, record_num)\n  } else {\n    // EDNS record\n    self.edns = true\n    delete self.name\n    delete self.class\n    //self.edns = parse.record_edns(sections, section_name, record_num)\n  }\n\n  var rdata = parse.record_data(sections, section_name, record_num)\n  switch (self.kind()) {\n    case 'IN A':\n      if(rdata.length != 4)\n        throw new Error('Bad IN A data: ' + JSON.stringify(self))\n      self.data = inet_ntoa(rdata)\n      break\n    case 'IN AAAA':\n      if(rdata.length != 16)\n        throw new Error('Bad IN AAAA data: ' + JSON.stringify(self))\n      self.data = inet_ntoa6(rdata)\n      break\n    case 'IN NS':\n    case 'IN CNAME':\n    case 'IN PTR':\n      self.data = parse.uncompress(body, rdata)\n      break\n    case 'IN TXT':\n      self.data = parse.txt(body, rdata)\n      if(self.data.length === 0)\n        self.data = ''\n      else if(self.data.length === 1)\n        self.data = self.data[0]\n      break\n    case 'IN MX':\n      self.data = parse.mx(body, rdata)\n      break\n    case 'IN SRV':\n      self.data = parse.srv(body, rdata)\n      break\n    case 'IN SOA':\n      self.data = parse.soa(body, rdata)\n      self.data.rname = self.data.rname.replace(/\\./, '@')\n      break\n    case 'IN DS':\n      self.data = { 'key_tag'    : rdata[0] << 8 | rdata[1]\n                  , 'algorithm'  : rdata[2]\n                  , 'digest_type': rdata[3]\n                  , 'digest'     : rdata.slice(4).toJSON() // Convert to a list of numbers.\n                  }\n      break\n    case 'NONE A':\n      self.data = []\n      break\n    case 'EDNS':\n      self.data = rdata\n      break\n    default:\n      throw new Error('Unknown record '+self.kind()+': ' + JSON.stringify(self))\n  }\n}\n\nDNSRecord.prototype.kind = function() {\n  return this.edns\n          ? 'EDNS'\n          : this.class + ' ' + this.type\n}\n\nDNSRecord.prototype.toString = function() {\n  var self = this\n  return [ width(23, self.name)\n         , width( 7, self.ttl || '')\n         , width( 7, self.class)\n         , width( 7, self.type)\n         , self.type == 'MX' && self.data\n            ? (width(3, self.data[0]) + ' ' + self.data[1])\n           : Buffer.isBuffer(self.data)\n            ? self.data.toString('hex')\n            : self.data || ''\n         ].join(' ')\n}\n\n//\n// Utilities\n//\n\nfunction width(str_len, str) {\n  str = '' + str\n  do {\n    var needed = str_len - str.length\n    if(needed > 0)\n      str = ' ' + str\n  } while(needed > 0)\n\n  return str\n}\n\nfunction inet_ntoa(buf) {\n  return buf[0] + '.' + buf[1] + '.' + buf[2] + '.' + buf[3]\n}\n\nfunction inet_ntoa6(buf) {\n  var result = []\n  for(var i = 0; i < 16; i += 2)\n    result.push(buf.slice(i, i+2).toString('hex'))\n  return result.join(':')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}